<?php

/**
 * S3Storage
 *
 * PHP version 5
 *
 * @category Class
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * BytescalePHP Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BytescalePHP\Client\Model;

use \ArrayAccess;
use \BytescalePHP\Client\ObjectSerializer;

/**
 * S3Storage Class Doc Comment
 *
 * @category Class
 * @description Storage layer used for storing files in custom S3 buckets, as opposed to Bytescale&#x27;s built-in storage.  This is a read/write storage layer.
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S3Storage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'S3Storage';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'bucket' => '\BytescalePHP\Client\Model\PickS3StorageExcludeKeyofS3StorageCredentialsBucket',
        'credentials' => '\BytescalePHP\Client\Model\S3StorageCredentials',
        'type' => 'string',
        'use_absolute_paths' => 'bool',
        'use_transfer_acceleration' => 'bool'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'bucket' => null,
        'credentials' => null,
        'type' => null,
        'use_absolute_paths' => null,
        'use_transfer_acceleration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bucket' => 'bucket',
        'credentials' => 'credentials',
        'type' => 'type',
        'use_absolute_paths' => 'useAbsolutePaths',
        'use_transfer_acceleration' => 'useTransferAcceleration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bucket' => 'setBucket',
        'credentials' => 'setCredentials',
        'type' => 'setType',
        'use_absolute_paths' => 'setUseAbsolutePaths',
        'use_transfer_acceleration' => 'setUseTransferAcceleration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bucket' => 'getBucket',
        'credentials' => 'getCredentials',
        'type' => 'getType',
        'use_absolute_paths' => 'getUseAbsolutePaths',
        'use_transfer_acceleration' => 'getUseTransferAcceleration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_S3 = 'S3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_S3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bucket'] = isset($data['bucket']) ? $data['bucket'] : null;
        $this->container['credentials'] = isset($data['credentials']) ? $data['credentials'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['use_absolute_paths'] = isset($data['use_absolute_paths']) ? $data['use_absolute_paths'] : null;
        $this->container['use_transfer_acceleration'] = isset($data['use_transfer_acceleration']) ? $data['use_transfer_acceleration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bucket'] === null) {
            $invalidProperties[] = "'bucket' can't be null";
        }
        if ($this->container['credentials'] === null) {
            $invalidProperties[] = "'credentials' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['use_absolute_paths'] === null) {
            $invalidProperties[] = "'use_absolute_paths' can't be null";
        }
        if ($this->container['use_transfer_acceleration'] === null) {
            $invalidProperties[] = "'use_transfer_acceleration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bucket
     *
     * @return \BytescalePHP\Client\Model\PickS3StorageExcludeKeyofS3StorageCredentialsBucket
     */
    public function getBucket()
    {
        return $this->container['bucket'];
    }

    /**
     * Sets bucket
     *
     * @param \BytescalePHP\Client\Model\PickS3StorageExcludeKeyofS3StorageCredentialsBucket $bucket bucket
     *
     * @return $this
     */
    public function setBucket($bucket)
    {
        $this->container['bucket'] = $bucket;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \BytescalePHP\Client\Model\S3StorageCredentials
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \BytescalePHP\Client\Model\S3StorageCredentials $credentials credentials
     *
     * @return $this
     */
    public function setCredentials($credentials)
    {
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of this storage layer.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_absolute_paths
     *
     * @return bool
     */
    public function getUseAbsolutePaths()
    {
        return $this->container['use_absolute_paths'];
    }

    /**
     * Sets use_absolute_paths
     *
     * @param bool $use_absolute_paths If `true` then writes S3 objects with full `filePath` as key, prefixed with the `objectKeyPrefix`.  If `false` then writes S3 objects using a relative `filePath` in relation to folder's path, prefixed with the `objectKeyPrefix`.
     *
     * @return $this
     */
    public function setUseAbsolutePaths($use_absolute_paths)
    {
        $this->container['use_absolute_paths'] = $use_absolute_paths;

        return $this;
    }

    /**
     * Gets use_transfer_acceleration
     *
     * @return bool
     */
    public function getUseTransferAcceleration()
    {
        return $this->container['use_transfer_acceleration'];
    }

    /**
     * Sets use_transfer_acceleration
     *
     * @param bool $use_transfer_acceleration Enables S3 transfer acceleration, providing improved file upload speeds for larger files.  Note: this setting must also be enabled on the S3 bucket.
     *
     * @return $this
     */
    public function setUseTransferAcceleration($use_transfer_acceleration)
    {
        $this->container['use_transfer_acceleration'] = $use_transfer_acceleration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
