<?php
/**
 * ObjectSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;

use \ArrayAccess;
use \Bytescale\ObjectSerializer;

/**
 * ObjectSummary Class Doc Comment
 *
 * @category Class
 * @description Summary information about a file or folder.
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjectSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ObjectSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'folderPath' => 'string',
        'settings' => '\Bytescale\Model\FolderSettingsStorageLayerSummary',
        'type' => 'string',
        'virtual' => 'bool',
        'filePath' => 'string',
        'fileUrl' => 'string',
        'lastModified' => 'int',
        'size' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'folderPath' => null,
        'settings' => null,
        'type' => null,
        'virtual' => null,
        'filePath' => null,
        'fileUrl' => null,
        'lastModified' => 'int32',
        'size' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'folderPath' => false,
        'settings' => false,
        'type' => false,
        'virtual' => false,
        'filePath' => false,
        'fileUrl' => false,
        'lastModified' => false,
        'size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'folderPath' => 'folderPath',
        'settings' => 'settings',
        'type' => 'type',
        'virtual' => 'virtual',
        'filePath' => 'filePath',
        'fileUrl' => 'fileUrl',
        'lastModified' => 'lastModified',
        'size' => 'size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'folderPath' => 'setFolderPath',
        'settings' => 'setSettings',
        'type' => 'setType',
        'virtual' => 'setVirtual',
        'filePath' => 'setFilePath',
        'fileUrl' => 'setFileUrl',
        'lastModified' => 'setLastModified',
        'size' => 'setSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'folderPath' => 'getFolderPath',
        'settings' => 'getSettings',
        'type' => 'getType',
        'virtual' => 'getVirtual',
        'filePath' => 'getFilePath',
        'fileUrl' => 'getFileUrl',
        'lastModified' => 'getLastModified',
        'size' => 'getSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_FOLDER = 'Folder';
    public const TYPE_FILE = 'File';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FOLDER,
            self::TYPE_FILE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('folderPath', $data ?? [], null);
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('virtual', $data ?? [], null);
        $this->setIfExists('filePath', $data ?? [], null);
        $this->setIfExists('fileUrl', $data ?? [], null);
        $this->setIfExists('lastModified', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['folderPath'] === null) {
            $invalidProperties[] = "'folderPath' can't be null";
        }
        if ((mb_strlen($this->container['folderPath']) > 512)) {
            $invalidProperties[] = "invalid value for 'folderPath', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['folderPath']) < 1)) {
            $invalidProperties[] = "invalid value for 'folderPath', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\/.*$/", $this->container['folderPath'])) {
            $invalidProperties[] = "invalid value for 'folderPath', must be conform to the pattern /^\/.*$/.";
        }

        if ($this->container['settings'] === null) {
            $invalidProperties[] = "'settings' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['virtual'] === null) {
            $invalidProperties[] = "'virtual' can't be null";
        }
        if ($this->container['filePath'] === null) {
            $invalidProperties[] = "'filePath' can't be null";
        }
        if ((mb_strlen($this->container['filePath']) > 512)) {
            $invalidProperties[] = "invalid value for 'filePath', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['filePath']) < 1)) {
            $invalidProperties[] = "invalid value for 'filePath', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\/.*$/", $this->container['filePath'])) {
            $invalidProperties[] = "invalid value for 'filePath', must be conform to the pattern /^\/.*$/.";
        }

        if ($this->container['fileUrl'] === null) {
            $invalidProperties[] = "'fileUrl' can't be null";
        }
        if ((mb_strlen($this->container['fileUrl']) > 255)) {
            $invalidProperties[] = "invalid value for 'fileUrl', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['fileUrl']) < 1)) {
            $invalidProperties[] = "invalid value for 'fileUrl', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/", $this->container['fileUrl'])) {
            $invalidProperties[] = "invalid value for 'fileUrl', must be conform to the pattern /^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/.";
        }

        if ($this->container['lastModified'] === null) {
            $invalidProperties[] = "'lastModified' can't be null";
        }
        if (($this->container['lastModified'] < 0)) {
            $invalidProperties[] = "invalid value for 'lastModified', must be bigger than or equal to 0.";
        }

        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if (($this->container['size'] < 0)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets folderPath
     *
     * @return string
     */
    public function getFolderPath()
    {
        return $this->container['folderPath'];
    }

    /**
     * Sets folderPath
     *
     * @param string $folderPath Absolute path to a folder. Begins with a `/`. Should not end with a `/`.
     *
     * @return self
     */
    public function setFolderPath($folderPath)
    {
        if (is_null($folderPath)) {
            throw new \InvalidArgumentException('non-nullable folderPath cannot be null');
        }
        if ((mb_strlen($folderPath) > 512)) {
            throw new \InvalidArgumentException('invalid length for $folderPath when calling ObjectSummary., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($folderPath) < 1)) {
            throw new \InvalidArgumentException('invalid length for $folderPath when calling ObjectSummary., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\/.*$/", ObjectSerializer::toString($folderPath)))) {
            throw new \InvalidArgumentException("invalid value for \$folderPath when calling ObjectSummary., must conform to the pattern /^\/.*$/.");
        }

        $this->container['folderPath'] = $folderPath;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Bytescale\Model\FolderSettingsStorageLayerSummary
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Bytescale\Model\FolderSettingsStorageLayerSummary $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Indicates this item is a folder (as opposed to a file).
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets virtual
     *
     * @return bool
     */
    public function getVirtual()
    {
        return $this->container['virtual'];
    }

    /**
     * Sets virtual
     *
     * @param bool $virtual If `true` then the folder was created using the PutFolder operation.  If `false` then the folder was created automatically as the result of a file upload operation, and will disappear if/when the folder later becomes empty.
     *
     * @return self
     */
    public function setVirtual($virtual)
    {
        if (is_null($virtual)) {
            throw new \InvalidArgumentException('non-nullable virtual cannot be null');
        }
        $this->container['virtual'] = $virtual;

        return $this;
    }

    /**
     * Gets filePath
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['filePath'];
    }

    /**
     * Sets filePath
     *
     * @param string $filePath Absolute path to a file. Begins with a `/`.
     *
     * @return self
     */
    public function setFilePath($filePath)
    {
        if (is_null($filePath)) {
            throw new \InvalidArgumentException('non-nullable filePath cannot be null');
        }
        if ((mb_strlen($filePath) > 512)) {
            throw new \InvalidArgumentException('invalid length for $filePath when calling ObjectSummary., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($filePath) < 1)) {
            throw new \InvalidArgumentException('invalid length for $filePath when calling ObjectSummary., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\/.*$/", ObjectSerializer::toString($filePath)))) {
            throw new \InvalidArgumentException("invalid value for \$filePath when calling ObjectSummary., must conform to the pattern /^\/.*$/.");
        }

        $this->container['filePath'] = $filePath;

        return $this;
    }

    /**
     * Gets fileUrl
     *
     * @return string
     */
    public function getFileUrl()
    {
        return $this->container['fileUrl'];
    }

    /**
     * Sets fileUrl
     *
     * @param string $fileUrl URL for a raw file hosted on the Bytescale CDN.
     *
     * @return self
     */
    public function setFileUrl($fileUrl)
    {
        if (is_null($fileUrl)) {
            throw new \InvalidArgumentException('non-nullable fileUrl cannot be null');
        }
        if ((mb_strlen($fileUrl) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fileUrl when calling ObjectSummary., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($fileUrl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fileUrl when calling ObjectSummary., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/", ObjectSerializer::toString($fileUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$fileUrl when calling ObjectSummary., must conform to the pattern /^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/.");
        }

        $this->container['fileUrl'] = $fileUrl;

        return $this;
    }

    /**
     * Gets lastModified
     *
     * @return int
     */
    public function getLastModified()
    {
        return $this->container['lastModified'];
    }

    /**
     * Sets lastModified
     *
     * @param int $lastModified Epoch milliseconds (since midnight 1 January 1970, UTC).
     *
     * @return self
     */
    public function setLastModified($lastModified)
    {
        if (is_null($lastModified)) {
            throw new \InvalidArgumentException('non-nullable lastModified cannot be null');
        }

        if (($lastModified < 0)) {
            throw new \InvalidArgumentException('invalid value for $lastModified when calling ObjectSummary., must be bigger than or equal to 0.');
        }

        $this->container['lastModified'] = $lastModified;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Size in bytes.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }

        if (($size < 0)) {
            throw new \InvalidArgumentException('invalid value for $size when calling ObjectSummary., must be bigger than or equal to 0.');
        }

        $this->container['size'] = $size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


