<?php
/**
 * MultipartUploadProtocol
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;
use \Bytescale\ObjectSerializer;

/**
 * MultipartUploadProtocol Class Doc Comment
 *
 * @category Class
 * @description Multipart file upload protocol version.  - &#x60;1.0&#x60;: this protocol version automatically downgrades to single part uploads when files are below a certain size. When this protocol is used for small files, the file exists immediately after the &#x60;PUT&#x60; request to the &#x60;uploadUrl&#x60; completes. This protocol requires more client-side code to implement, and has a known issue whereby file TTLs are ignored if the client code fails to call CompleteUploadPart.  - &#x60;1.1&#x60;: this protocol version uses multipart uploads for all files. When this protocol is used, files only exist after the last CompleteUploadPart request is made. This protocol simplifies client code, and fixes a known issue in the &#x60;2.0&#x60; protocol for file TTLs (described above).
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MultipartUploadProtocol
{
    /**
     * Possible values of this enum
     */
    public const _0 = '1.0';

    public const _1 = '1.1';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::_0,
            self::_1
        ];
    }
}


