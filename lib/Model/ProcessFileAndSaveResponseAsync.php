<?php
/**
 * ProcessFileAndSaveResponseAsync
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;

use \ArrayAccess;
use \Bytescale\ObjectSerializer;

/**
 * ProcessFileAndSaveResponseAsync Class Doc Comment
 *
 * @category Class
 * @description Response body for ProcessFileAndSave operations where the File Processing API operation is asynchronous (e.g. a video transcoding job).
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProcessFileAndSaveResponseAsync implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProcessFileAndSaveResponseAsync';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jobDocs' => 'string',
        'jobId' => 'string',
        'jobType' => '\Bytescale\Model\AccountJobType',
        'jobUrl' => 'string',
        'accountId' => 'string',
        'created' => 'int',
        'error' => '\Bytescale\Model\JobSummaryError',
        'lastUpdated' => 'int',
        'status' => '\Bytescale\Model\AccountJobStatus',
        'summary' => 'array<string,mixed>',
        'async' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'jobDocs' => null,
        'jobId' => null,
        'jobType' => null,
        'jobUrl' => null,
        'accountId' => null,
        'created' => 'int32',
        'error' => null,
        'lastUpdated' => 'int32',
        'status' => null,
        'summary' => null,
        'async' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'jobDocs' => false,
        'jobId' => false,
        'jobType' => false,
        'jobUrl' => false,
        'accountId' => false,
        'created' => false,
        'error' => true,
        'lastUpdated' => false,
        'status' => false,
        'summary' => false,
        'async' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobDocs' => 'jobDocs',
        'jobId' => 'jobId',
        'jobType' => 'jobType',
        'jobUrl' => 'jobUrl',
        'accountId' => 'accountId',
        'created' => 'created',
        'error' => 'error',
        'lastUpdated' => 'lastUpdated',
        'status' => 'status',
        'summary' => 'summary',
        'async' => 'async'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobDocs' => 'setJobDocs',
        'jobId' => 'setJobId',
        'jobType' => 'setJobType',
        'jobUrl' => 'setJobUrl',
        'accountId' => 'setAccountId',
        'created' => 'setCreated',
        'error' => 'setError',
        'lastUpdated' => 'setLastUpdated',
        'status' => 'setStatus',
        'summary' => 'setSummary',
        'async' => 'setAsync'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobDocs' => 'getJobDocs',
        'jobId' => 'getJobId',
        'jobType' => 'getJobType',
        'jobUrl' => 'getJobUrl',
        'accountId' => 'getAccountId',
        'created' => 'getCreated',
        'error' => 'getError',
        'lastUpdated' => 'getLastUpdated',
        'status' => 'getStatus',
        'summary' => 'getSummary',
        'async' => 'getAsync'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JOB_DOCS_HTTPS__WWW_BYTESCALE_COM_DOCS_JOB_API_GET_JOB = 'https://www.bytescale.com/docs/job-api/GetJob';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobDocsAllowableValues()
    {
        return [
            self::JOB_DOCS_HTTPS__WWW_BYTESCALE_COM_DOCS_JOB_API_GET_JOB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('jobDocs', $data ?? [], null);
        $this->setIfExists('jobId', $data ?? [], null);
        $this->setIfExists('jobType', $data ?? [], null);
        $this->setIfExists('jobUrl', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('lastUpdated', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('async', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jobDocs'] === null) {
            $invalidProperties[] = "'jobDocs' can't be null";
        }
        $allowedValues = $this->getJobDocsAllowableValues();
        if (!is_null($this->container['jobDocs']) && !in_array($this->container['jobDocs'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'jobDocs', must be one of '%s'",
                $this->container['jobDocs'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['jobId'] === null) {
            $invalidProperties[] = "'jobId' can't be null";
        }
        if ((mb_strlen($this->container['jobId']) > 26)) {
            $invalidProperties[] = "invalid value for 'jobId', the character length must be smaller than or equal to 26.";
        }

        if ((mb_strlen($this->container['jobId']) < 26)) {
            $invalidProperties[] = "invalid value for 'jobId', the character length must be bigger than or equal to 26.";
        }

        if (!preg_match("/^[0-9A-Z]+$/", $this->container['jobId'])) {
            $invalidProperties[] = "invalid value for 'jobId', must be conform to the pattern /^[0-9A-Z]+$/.";
        }

        if ($this->container['jobType'] === null) {
            $invalidProperties[] = "'jobType' can't be null";
        }
        if ($this->container['jobUrl'] === null) {
            $invalidProperties[] = "'jobUrl' can't be null";
        }
        if ((mb_strlen($this->container['jobUrl']) > 255)) {
            $invalidProperties[] = "invalid value for 'jobUrl', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['jobUrl']) < 1)) {
            $invalidProperties[] = "invalid value for 'jobUrl', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/", $this->container['jobUrl'])) {
            $invalidProperties[] = "invalid value for 'jobUrl', must be conform to the pattern /^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/.";
        }

        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }
        if ((mb_strlen($this->container['accountId']) > 7)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be smaller than or equal to 7.";
        }

        if ((mb_strlen($this->container['accountId']) < 7)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be bigger than or equal to 7.";
        }

        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $this->container['accountId'])) {
            $invalidProperties[] = "invalid value for 'accountId', must be conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if (($this->container['created'] < 0)) {
            $invalidProperties[] = "invalid value for 'created', must be bigger than or equal to 0.";
        }

        if ($this->container['error'] === null) {
            $invalidProperties[] = "'error' can't be null";
        }
        if ($this->container['lastUpdated'] === null) {
            $invalidProperties[] = "'lastUpdated' can't be null";
        }
        if (($this->container['lastUpdated'] < 0)) {
            $invalidProperties[] = "invalid value for 'lastUpdated', must be bigger than or equal to 0.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['async'] === null) {
            $invalidProperties[] = "'async' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jobDocs
     *
     * @return string
     */
    public function getJobDocs()
    {
        return $this->container['jobDocs'];
    }

    /**
     * Sets jobDocs
     *
     * @param string $jobDocs Link to the documentation that describes how to get a job's status from its job ID.
     *
     * @return self
     */
    public function setJobDocs($jobDocs)
    {
        if (is_null($jobDocs)) {
            throw new \InvalidArgumentException('non-nullable jobDocs cannot be null');
        }
        $allowedValues = $this->getJobDocsAllowableValues();
        if (!in_array($jobDocs, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'jobDocs', must be one of '%s'",
                    $jobDocs,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jobDocs'] = $jobDocs;

        return $this;
    }

    /**
     * Gets jobId
     *
     * @return string
     */
    public function getJobId()
    {
        return $this->container['jobId'];
    }

    /**
     * Sets jobId
     *
     * @param string $jobId Job ID.
     *
     * @return self
     */
    public function setJobId($jobId)
    {
        if (is_null($jobId)) {
            throw new \InvalidArgumentException('non-nullable jobId cannot be null');
        }
        if ((mb_strlen($jobId) > 26)) {
            throw new \InvalidArgumentException('invalid length for $jobId when calling ProcessFileAndSaveResponseAsync., must be smaller than or equal to 26.');
        }
        if ((mb_strlen($jobId) < 26)) {
            throw new \InvalidArgumentException('invalid length for $jobId when calling ProcessFileAndSaveResponseAsync., must be bigger than or equal to 26.');
        }
        if ((!preg_match("/^[0-9A-Z]+$/", ObjectSerializer::toString($jobId)))) {
            throw new \InvalidArgumentException("invalid value for \$jobId when calling ProcessFileAndSaveResponseAsync., must conform to the pattern /^[0-9A-Z]+$/.");
        }

        $this->container['jobId'] = $jobId;

        return $this;
    }

    /**
     * Gets jobType
     *
     * @return \Bytescale\Model\AccountJobType
     */
    public function getJobType()
    {
        return $this->container['jobType'];
    }

    /**
     * Sets jobType
     *
     * @param \Bytescale\Model\AccountJobType $jobType jobType
     *
     * @return self
     */
    public function setJobType($jobType)
    {
        if (is_null($jobType)) {
            throw new \InvalidArgumentException('non-nullable jobType cannot be null');
        }
        $this->container['jobType'] = $jobType;

        return $this;
    }

    /**
     * Gets jobUrl
     *
     * @return string
     */
    public function getJobUrl()
    {
        return $this->container['jobUrl'];
    }

    /**
     * Sets jobUrl
     *
     * @param string $jobUrl URL for the job's status.  You can `GET` this URL to retrieve the job's status.  You must authorize your `GET` request with a ```secret_*``` API key when accessing the URL.
     *
     * @return self
     */
    public function setJobUrl($jobUrl)
    {
        if (is_null($jobUrl)) {
            throw new \InvalidArgumentException('non-nullable jobUrl cannot be null');
        }
        if ((mb_strlen($jobUrl) > 255)) {
            throw new \InvalidArgumentException('invalid length for $jobUrl when calling ProcessFileAndSaveResponseAsync., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($jobUrl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $jobUrl when calling ProcessFileAndSaveResponseAsync., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/", ObjectSerializer::toString($jobUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$jobUrl when calling ProcessFileAndSaveResponseAsync., must conform to the pattern /^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/.");
        }

        $this->container['jobUrl'] = $jobUrl;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string $accountId Your account ID.  This is visible on the settings page:  https://www.bytescale.com/dashboard/settings
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        if (is_null($accountId)) {
            throw new \InvalidArgumentException('non-nullable accountId cannot be null');
        }
        if ((mb_strlen($accountId) > 7)) {
            throw new \InvalidArgumentException('invalid length for $accountId when calling ProcessFileAndSaveResponseAsync., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($accountId) < 7)) {
            throw new \InvalidArgumentException('invalid length for $accountId when calling ProcessFileAndSaveResponseAsync., must be bigger than or equal to 7.');
        }
        if ((!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", ObjectSerializer::toString($accountId)))) {
            throw new \InvalidArgumentException("invalid value for \$accountId when calling ProcessFileAndSaveResponseAsync., must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created Epoch milliseconds (since midnight 1 January 1970, UTC).
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        if (($created < 0)) {
            throw new \InvalidArgumentException('invalid value for $created when calling ProcessFileAndSaveResponseAsync., must be bigger than or equal to 0.');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \Bytescale\Model\JobSummaryError
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Bytescale\Model\JobSummaryError $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param int $lastUpdated Epoch milliseconds (since midnight 1 January 1970, UTC).
     *
     * @return self
     */
    public function setLastUpdated($lastUpdated)
    {
        if (is_null($lastUpdated)) {
            throw new \InvalidArgumentException('non-nullable lastUpdated cannot be null');
        }

        if (($lastUpdated < 0)) {
            throw new \InvalidArgumentException('invalid value for $lastUpdated when calling ProcessFileAndSaveResponseAsync., must be bigger than or equal to 0.');
        }

        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Bytescale\Model\AccountJobStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Bytescale\Model\AccountJobStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return array<string,mixed>
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param array<string,mixed> $summary An arbitrary JSON object.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets async
     *
     * @return bool
     */
    public function getAsync()
    {
        return $this->container['async'];
    }

    /**
     * Sets async
     *
     * @param bool $async True for asynchronous file processing operations (e.g. video transcoding).  For asynchronous operations, the response body will contain information about the background job that's processing the file, which can then be polled via the GetJob operation.
     *
     * @return self
     */
    public function setAsync($async)
    {
        if (is_null($async)) {
            throw new \InvalidArgumentException('non-nullable async cannot be null');
        }
        $this->container['async'] = $async;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


