<?php

/**
 * CopyFolderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * BytescalePHP Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BytescalePHP\Client\Model;

use \ArrayAccess;
use \BytescalePHP\Client\ObjectSerializer;

/**
 * CopyFolderRequest Class Doc Comment
 *
 * @category Class
 * @description Request body for CopyFolder.
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CopyFolderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CopyFolderRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'copy_files' => 'bool',
        'copy_overridden_storage' => 'bool',
        'copy_virtual_folders' => 'bool',
        'destination' => '\BytescalePHP\Client\Model\FolderPath',
        'recursive' => 'bool',
        'source' => '\BytescalePHP\Client\Model\FolderPath'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'copy_files' => null,
        'copy_overridden_storage' => null,
        'copy_virtual_folders' => null,
        'destination' => null,
        'recursive' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'copy_files' => 'copyFiles',
        'copy_overridden_storage' => 'copyOverriddenStorage',
        'copy_virtual_folders' => 'copyVirtualFolders',
        'destination' => 'destination',
        'recursive' => 'recursive',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'copy_files' => 'setCopyFiles',
        'copy_overridden_storage' => 'setCopyOverriddenStorage',
        'copy_virtual_folders' => 'setCopyVirtualFolders',
        'destination' => 'setDestination',
        'recursive' => 'setRecursive',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'copy_files' => 'getCopyFiles',
        'copy_overridden_storage' => 'getCopyOverriddenStorage',
        'copy_virtual_folders' => 'getCopyVirtualFolders',
        'destination' => 'getDestination',
        'recursive' => 'getRecursive',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['copy_files'] = isset($data['copy_files']) ? $data['copy_files'] : null;
        $this->container['copy_overridden_storage'] = isset($data['copy_overridden_storage']) ? $data['copy_overridden_storage'] : null;
        $this->container['copy_virtual_folders'] = isset($data['copy_virtual_folders']) ? $data['copy_virtual_folders'] : null;
        $this->container['destination'] = isset($data['destination']) ? $data['destination'] : null;
        $this->container['recursive'] = isset($data['recursive']) ? $data['recursive'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets copy_files
     *
     * @return bool
     */
    public function getCopyFiles()
    {
        return $this->container['copy_files'];
    }

    /**
     * Sets copy_files
     *
     * @param bool $copy_files If `true` then copies files.  Default: true
     *
     * @return $this
     */
    public function setCopyFiles($copy_files)
    {
        $this->container['copy_files'] = $copy_files;

        return $this;
    }

    /**
     * Gets copy_overridden_storage
     *
     * @return bool
     */
    public function getCopyOverriddenStorage()
    {
        return $this->container['copy_overridden_storage'];
    }

    /**
     * Sets copy_overridden_storage
     *
     * @param bool $copy_overridden_storage If `false` then if a file's parent folder has overridden storage settings, the file won't be copied.  If you don't use folders with custom storage settings (like AWS S3 buckets), you don't need to worry about this setting.  Conditional: `copyVirtualFolders` and `copyOverriddenStorage` cannot both be `true`.  Default: false
     *
     * @return $this
     */
    public function setCopyOverriddenStorage($copy_overridden_storage)
    {
        $this->container['copy_overridden_storage'] = $copy_overridden_storage;

        return $this;
    }

    /**
     * Gets copy_virtual_folders
     *
     * @return bool
     */
    public function getCopyVirtualFolders()
    {
        return $this->container['copy_virtual_folders'];
    }

    /**
     * Sets copy_virtual_folders
     *
     * @param bool $copy_virtual_folders If `true` then copies virtual folder settings at the current path and below, else only files will be copied.  Virtual folders are folders that have been created using the PutFolder operation.  Conditional: `copyVirtualFolders` and `copyOverriddenStorage` cannot both be `true`.  Default: true
     *
     * @return $this
     */
    public function setCopyVirtualFolders($copy_virtual_folders)
    {
        $this->container['copy_virtual_folders'] = $copy_virtual_folders;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \BytescalePHP\Client\Model\FolderPath
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \BytescalePHP\Client\Model\FolderPath $destination destination
     *
     * @return $this
     */
    public function setDestination($destination)
    {
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool $recursive If `true` then copies files and virtual folders that are descendants of the `source` folder.  If `false` then only copies files that are direct children of the `source` folder, and does not copy descendant virtual folders (children or otherwise).  Default: true
     *
     * @return $this
     */
    public function setRecursive($recursive)
    {
        $this->container['recursive'] = $recursive;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \BytescalePHP\Client\Model\FolderPath
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \BytescalePHP\Client\Model\FolderPath $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
