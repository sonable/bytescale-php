<?php
/**
 * CopyFolderRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;

use \ArrayAccess;
use \Bytescale\ObjectSerializer;

/**
 * CopyFolderRequest Class Doc Comment
 *
 * @category Class
 * @description Request body for CopyFolder.
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CopyFolderRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CopyFolderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'copyFiles' => 'bool',
        'copyOverriddenStorage' => 'bool',
        'copyVirtualFolders' => 'bool',
        'destination' => 'string',
        'recursive' => 'bool',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'copyFiles' => null,
        'copyOverriddenStorage' => null,
        'copyVirtualFolders' => null,
        'destination' => null,
        'recursive' => null,
        'source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'copyFiles' => false,
        'copyOverriddenStorage' => false,
        'copyVirtualFolders' => false,
        'destination' => false,
        'recursive' => false,
        'source' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'copyFiles' => 'copyFiles',
        'copyOverriddenStorage' => 'copyOverriddenStorage',
        'copyVirtualFolders' => 'copyVirtualFolders',
        'destination' => 'destination',
        'recursive' => 'recursive',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'copyFiles' => 'setCopyFiles',
        'copyOverriddenStorage' => 'setCopyOverriddenStorage',
        'copyVirtualFolders' => 'setCopyVirtualFolders',
        'destination' => 'setDestination',
        'recursive' => 'setRecursive',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'copyFiles' => 'getCopyFiles',
        'copyOverriddenStorage' => 'getCopyOverriddenStorage',
        'copyVirtualFolders' => 'getCopyVirtualFolders',
        'destination' => 'getDestination',
        'recursive' => 'getRecursive',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('copyFiles', $data ?? [], null);
        $this->setIfExists('copyOverriddenStorage', $data ?? [], null);
        $this->setIfExists('copyVirtualFolders', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('recursive', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ((mb_strlen($this->container['destination']) > 512)) {
            $invalidProperties[] = "invalid value for 'destination', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['destination']) < 1)) {
            $invalidProperties[] = "invalid value for 'destination', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\/.*$/", $this->container['destination'])) {
            $invalidProperties[] = "invalid value for 'destination', must be conform to the pattern /^\/.*$/.";
        }

        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ((mb_strlen($this->container['source']) > 512)) {
            $invalidProperties[] = "invalid value for 'source', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['source']) < 1)) {
            $invalidProperties[] = "invalid value for 'source', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\/.*$/", $this->container['source'])) {
            $invalidProperties[] = "invalid value for 'source', must be conform to the pattern /^\/.*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets copyFiles
     *
     * @return bool|null
     */
    public function getCopyFiles()
    {
        return $this->container['copyFiles'];
    }

    /**
     * Sets copyFiles
     *
     * @param bool|null $copyFiles If `true` then copies files.  Default: true
     *
     * @return self
     */
    public function setCopyFiles($copyFiles)
    {
        if (is_null($copyFiles)) {
            throw new \InvalidArgumentException('non-nullable copyFiles cannot be null');
        }
        $this->container['copyFiles'] = $copyFiles;

        return $this;
    }

    /**
     * Gets copyOverriddenStorage
     *
     * @return bool|null
     */
    public function getCopyOverriddenStorage()
    {
        return $this->container['copyOverriddenStorage'];
    }

    /**
     * Sets copyOverriddenStorage
     *
     * @param bool|null $copyOverriddenStorage If `false` then if a file's parent folder has overridden storage settings, the file won't be copied.  If you don't use folders with custom storage settings (like AWS S3 buckets), you don't need to worry about this setting.  Conditional: `copyVirtualFolders` and `copyOverriddenStorage` cannot both be `true`.  Default: false
     *
     * @return self
     */
    public function setCopyOverriddenStorage($copyOverriddenStorage)
    {
        if (is_null($copyOverriddenStorage)) {
            throw new \InvalidArgumentException('non-nullable copyOverriddenStorage cannot be null');
        }
        $this->container['copyOverriddenStorage'] = $copyOverriddenStorage;

        return $this;
    }

    /**
     * Gets copyVirtualFolders
     *
     * @return bool|null
     */
    public function getCopyVirtualFolders()
    {
        return $this->container['copyVirtualFolders'];
    }

    /**
     * Sets copyVirtualFolders
     *
     * @param bool|null $copyVirtualFolders If `true` then copies virtual folder settings at the current path and below, else only files will be copied.  Virtual folders are folders that have been created using the PutFolder operation.  Conditional: `copyVirtualFolders` and `copyOverriddenStorage` cannot both be `true`.  Default: true
     *
     * @return self
     */
    public function setCopyVirtualFolders($copyVirtualFolders)
    {
        if (is_null($copyVirtualFolders)) {
            throw new \InvalidArgumentException('non-nullable copyVirtualFolders cannot be null');
        }
        $this->container['copyVirtualFolders'] = $copyVirtualFolders;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination Absolute path to a folder. Begins with a `/`. Should not end with a `/`.
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        if ((mb_strlen($destination) > 512)) {
            throw new \InvalidArgumentException('invalid length for $destination when calling CopyFolderRequest., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($destination) < 1)) {
            throw new \InvalidArgumentException('invalid length for $destination when calling CopyFolderRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\/.*$/", ObjectSerializer::toString($destination)))) {
            throw new \InvalidArgumentException("invalid value for \$destination when calling CopyFolderRequest., must conform to the pattern /^\/.*$/.");
        }

        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool|null
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool|null $recursive If `true` then copies files and virtual folders that are descendants of the `source` folder.  If `false` then only copies files that are direct children of the `source` folder, and does not copy descendant virtual folders (children or otherwise).  Default: true
     *
     * @return self
     */
    public function setRecursive($recursive)
    {
        if (is_null($recursive)) {
            throw new \InvalidArgumentException('non-nullable recursive cannot be null');
        }
        $this->container['recursive'] = $recursive;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Absolute path to a folder. Begins with a `/`. Should not end with a `/`.
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        if ((mb_strlen($source) > 512)) {
            throw new \InvalidArgumentException('invalid length for $source when calling CopyFolderRequest., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($source) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source when calling CopyFolderRequest., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\/.*$/", ObjectSerializer::toString($source)))) {
            throw new \InvalidArgumentException("invalid value for \$source when calling CopyFolderRequest., must conform to the pattern /^\/.*$/.");
        }

        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


