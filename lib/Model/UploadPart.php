<?php
/**
 * UploadPart
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;

use \ArrayAccess;
use \Bytescale\ObjectSerializer;

/**
 * UploadPart Class Doc Comment
 *
 * @category Class
 * @description Represents a part of a file to be uploaded as part of a multipart file upload.  Specifies the &#39;range&#39; of the file that needs uploading, together with an &#39;uploadUrl&#39; of where to PUT those bytes to.  The PUT request to the &#x60;uploadUrl&#x60; will return an etag response header, which must be provided in a subsequent CompleteUploadPart request.  See: basic file uploads, multipart file uploads.
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UploadPart implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UploadPart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'range' => '\Bytescale\Model\UploadPartRange',
        'uploadId' => 'string',
        'uploadPartIndex' => 'int',
        'uploadUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'range' => null,
        'uploadId' => null,
        'uploadPartIndex' => 'int32',
        'uploadUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'range' => false,
        'uploadId' => false,
        'uploadPartIndex' => false,
        'uploadUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'range' => 'range',
        'uploadId' => 'uploadId',
        'uploadPartIndex' => 'uploadPartIndex',
        'uploadUrl' => 'uploadUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'range' => 'setRange',
        'uploadId' => 'setUploadId',
        'uploadPartIndex' => 'setUploadPartIndex',
        'uploadUrl' => 'setUploadUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'range' => 'getRange',
        'uploadId' => 'getUploadId',
        'uploadPartIndex' => 'getUploadPartIndex',
        'uploadUrl' => 'getUploadUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('range', $data ?? [], null);
        $this->setIfExists('uploadId', $data ?? [], null);
        $this->setIfExists('uploadPartIndex', $data ?? [], null);
        $this->setIfExists('uploadUrl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['range'] === null) {
            $invalidProperties[] = "'range' can't be null";
        }
        if ($this->container['uploadId'] === null) {
            $invalidProperties[] = "'uploadId' can't be null";
        }
        if ((mb_strlen($this->container['uploadId']) > 16)) {
            $invalidProperties[] = "invalid value for 'uploadId', the character length must be smaller than or equal to 16.";
        }

        if ((mb_strlen($this->container['uploadId']) < 16)) {
            $invalidProperties[] = "invalid value for 'uploadId', the character length must be bigger than or equal to 16.";
        }

        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $this->container['uploadId'])) {
            $invalidProperties[] = "invalid value for 'uploadId', must be conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.";
        }

        if ($this->container['uploadPartIndex'] === null) {
            $invalidProperties[] = "'uploadPartIndex' can't be null";
        }
        if (($this->container['uploadPartIndex'] < 0)) {
            $invalidProperties[] = "invalid value for 'uploadPartIndex', must be bigger than or equal to 0.";
        }

        if ($this->container['uploadUrl'] === null) {
            $invalidProperties[] = "'uploadUrl' can't be null";
        }
        if ((mb_strlen($this->container['uploadUrl']) < 10)) {
            $invalidProperties[] = "invalid value for 'uploadUrl', the character length must be bigger than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets range
     *
     * @return \Bytescale\Model\UploadPartRange
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \Bytescale\Model\UploadPartRange $range range
     *
     * @return self
     */
    public function setRange($range)
    {
        if (is_null($range)) {
            throw new \InvalidArgumentException('non-nullable range cannot be null');
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets uploadId
     *
     * @return string
     */
    public function getUploadId()
    {
        return $this->container['uploadId'];
    }

    /**
     * Sets uploadId
     *
     * @param string $uploadId The ID for the multipart file upload.
     *
     * @return self
     */
    public function setUploadId($uploadId)
    {
        if (is_null($uploadId)) {
            throw new \InvalidArgumentException('non-nullable uploadId cannot be null');
        }
        if ((mb_strlen($uploadId) > 16)) {
            throw new \InvalidArgumentException('invalid length for $uploadId when calling UploadPart., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($uploadId) < 16)) {
            throw new \InvalidArgumentException('invalid length for $uploadId when calling UploadPart., must be bigger than or equal to 16.');
        }
        if ((!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", ObjectSerializer::toString($uploadId)))) {
            throw new \InvalidArgumentException("invalid value for \$uploadId when calling UploadPart., must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }

        $this->container['uploadId'] = $uploadId;

        return $this;
    }

    /**
     * Gets uploadPartIndex
     *
     * @return int
     */
    public function getUploadPartIndex()
    {
        return $this->container['uploadPartIndex'];
    }

    /**
     * Sets uploadPartIndex
     *
     * @param int $uploadPartIndex Index of an uploadable file part.  Can be used as the `uploadPartIndex` parameter in the GetUploadPart and CompleteUploadPart operations.
     *
     * @return self
     */
    public function setUploadPartIndex($uploadPartIndex)
    {
        if (is_null($uploadPartIndex)) {
            throw new \InvalidArgumentException('non-nullable uploadPartIndex cannot be null');
        }

        if (($uploadPartIndex < 0)) {
            throw new \InvalidArgumentException('invalid value for $uploadPartIndex when calling UploadPart., must be bigger than or equal to 0.');
        }

        $this->container['uploadPartIndex'] = $uploadPartIndex;

        return $this;
    }

    /**
     * Gets uploadUrl
     *
     * @return string
     */
    public function getUploadUrl()
    {
        return $this->container['uploadUrl'];
    }

    /**
     * Sets uploadUrl
     *
     * @param string $uploadUrl Pre-signed upload URL for this part.  You are required to issue a `PUT` to this URL, with the file's bytes as the request body (limited to the range indicated by this upload part).  The `PUT` request will return an `etag` response header, which must be provided in a subsequent CompleteUploadPart request.
     *
     * @return self
     */
    public function setUploadUrl($uploadUrl)
    {
        if (is_null($uploadUrl)) {
            throw new \InvalidArgumentException('non-nullable uploadUrl cannot be null');
        }

        if ((mb_strlen($uploadUrl) < 10)) {
            throw new \InvalidArgumentException('invalid length for $uploadUrl when calling UploadPart., must be bigger than or equal to 10.');
        }

        $this->container['uploadUrl'] = $uploadUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


