<?php
/**
 * BasicUploadResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;

use \ArrayAccess;
use \Bytescale\ObjectSerializer;

/**
 * BasicUploadResponse Class Doc Comment
 *
 * @category Class
 * @description Response body for BasicUpload.
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BasicUploadResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BasicUploadResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'string',
        'filePath' => 'string',
        'fileUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountId' => null,
        'filePath' => null,
        'fileUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accountId' => false,
        'filePath' => false,
        'fileUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'filePath' => 'filePath',
        'fileUrl' => 'fileUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'filePath' => 'setFilePath',
        'fileUrl' => 'setFileUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'filePath' => 'getFilePath',
        'fileUrl' => 'getFileUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('filePath', $data ?? [], null);
        $this->setIfExists('fileUrl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }
        if ((mb_strlen($this->container['accountId']) > 7)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be smaller than or equal to 7.";
        }

        if ((mb_strlen($this->container['accountId']) < 7)) {
            $invalidProperties[] = "invalid value for 'accountId', the character length must be bigger than or equal to 7.";
        }

        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $this->container['accountId'])) {
            $invalidProperties[] = "invalid value for 'accountId', must be conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.";
        }

        if ($this->container['filePath'] === null) {
            $invalidProperties[] = "'filePath' can't be null";
        }
        if ((mb_strlen($this->container['filePath']) > 512)) {
            $invalidProperties[] = "invalid value for 'filePath', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['filePath']) < 1)) {
            $invalidProperties[] = "invalid value for 'filePath', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^\/.*$/", $this->container['filePath'])) {
            $invalidProperties[] = "invalid value for 'filePath', must be conform to the pattern /^\/.*$/.";
        }

        if ($this->container['fileUrl'] === null) {
            $invalidProperties[] = "'fileUrl' can't be null";
        }
        if ((mb_strlen($this->container['fileUrl']) > 255)) {
            $invalidProperties[] = "invalid value for 'fileUrl', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['fileUrl']) < 1)) {
            $invalidProperties[] = "invalid value for 'fileUrl', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/", $this->container['fileUrl'])) {
            $invalidProperties[] = "invalid value for 'fileUrl', must be conform to the pattern /^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string $accountId Your account ID.  This is visible on the settings page:  https://www.bytescale.com/dashboard/settings
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        if (is_null($accountId)) {
            throw new \InvalidArgumentException('non-nullable accountId cannot be null');
        }
        if ((mb_strlen($accountId) > 7)) {
            throw new \InvalidArgumentException('invalid length for $accountId when calling BasicUploadResponse., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($accountId) < 7)) {
            throw new \InvalidArgumentException('invalid length for $accountId when calling BasicUploadResponse., must be bigger than or equal to 7.');
        }
        if ((!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", ObjectSerializer::toString($accountId)))) {
            throw new \InvalidArgumentException("invalid value for \$accountId when calling BasicUploadResponse., must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }

        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets filePath
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['filePath'];
    }

    /**
     * Sets filePath
     *
     * @param string $filePath Absolute path to a file. Begins with a `/`.
     *
     * @return self
     */
    public function setFilePath($filePath)
    {
        if (is_null($filePath)) {
            throw new \InvalidArgumentException('non-nullable filePath cannot be null');
        }
        if ((mb_strlen($filePath) > 512)) {
            throw new \InvalidArgumentException('invalid length for $filePath when calling BasicUploadResponse., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($filePath) < 1)) {
            throw new \InvalidArgumentException('invalid length for $filePath when calling BasicUploadResponse., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^\/.*$/", ObjectSerializer::toString($filePath)))) {
            throw new \InvalidArgumentException("invalid value for \$filePath when calling BasicUploadResponse., must conform to the pattern /^\/.*$/.");
        }

        $this->container['filePath'] = $filePath;

        return $this;
    }

    /**
     * Gets fileUrl
     *
     * @return string
     */
    public function getFileUrl()
    {
        return $this->container['fileUrl'];
    }

    /**
     * Sets fileUrl
     *
     * @param string $fileUrl URL for a raw file hosted on the Bytescale CDN.
     *
     * @return self
     */
    public function setFileUrl($fileUrl)
    {
        if (is_null($fileUrl)) {
            throw new \InvalidArgumentException('non-nullable fileUrl cannot be null');
        }
        if ((mb_strlen($fileUrl) > 255)) {
            throw new \InvalidArgumentException('invalid length for $fileUrl when calling BasicUploadResponse., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($fileUrl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fileUrl when calling BasicUploadResponse., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/", ObjectSerializer::toString($fileUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$fileUrl when calling BasicUploadResponse., must conform to the pattern /^https?:\/\/[-a-zA-Z0-9]+(?:\\.[-a-zA-Z0-9]+)+(\/.*)?$/.");
        }

        $this->container['fileUrl'] = $fileUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


