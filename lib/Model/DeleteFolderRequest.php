<?php

/**
 * DeleteFolderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * BytescalePHP Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BytescalePHP\Client\Model;

use \ArrayAccess;
use \BytescalePHP\Client\ObjectSerializer;

/**
 * DeleteFolderRequest Class Doc Comment
 *
 * @category Class
 * @description Request body for DeleteFolder.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#x27;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeleteFolderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'DeleteFolderRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'delete_files' => 'bool',
        'delete_virtual_folders' => 'bool',
        'folder_path' => '\BytescalePHP\Client\Model\FolderPath',
        'recursive' => 'bool'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'delete_files' => null,
        'delete_virtual_folders' => null,
        'folder_path' => null,
        'recursive' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delete_files' => 'deleteFiles',
        'delete_virtual_folders' => 'deleteVirtualFolders',
        'folder_path' => 'folderPath',
        'recursive' => 'recursive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delete_files' => 'setDeleteFiles',
        'delete_virtual_folders' => 'setDeleteVirtualFolders',
        'folder_path' => 'setFolderPath',
        'recursive' => 'setRecursive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delete_files' => 'getDeleteFiles',
        'delete_virtual_folders' => 'getDeleteVirtualFolders',
        'folder_path' => 'getFolderPath',
        'recursive' => 'getRecursive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delete_files'] = isset($data['delete_files']) ? $data['delete_files'] : null;
        $this->container['delete_virtual_folders'] = isset($data['delete_virtual_folders']) ? $data['delete_virtual_folders'] : null;
        $this->container['folder_path'] = isset($data['folder_path']) ? $data['folder_path'] : null;
        $this->container['recursive'] = isset($data['recursive']) ? $data['recursive'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['folder_path'] === null) {
            $invalidProperties[] = "'folder_path' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delete_files
     *
     * @return bool
     */
    public function getDeleteFiles()
    {
        return $this->container['delete_files'];
    }

    /**
     * Sets delete_files
     *
     * @param bool $delete_files If `true` then deletes files.  Default: true
     *
     * @return $this
     */
    public function setDeleteFiles($delete_files)
    {
        $this->container['delete_files'] = $delete_files;

        return $this;
    }

    /**
     * Gets delete_virtual_folders
     *
     * @return bool
     */
    public function getDeleteVirtualFolders()
    {
        return $this->container['delete_virtual_folders'];
    }

    /**
     * Sets delete_virtual_folders
     *
     * @param bool $delete_virtual_folders If `true` then deletes folder settings.  Default: true
     *
     * @return $this
     */
    public function setDeleteVirtualFolders($delete_virtual_folders)
    {
        $this->container['delete_virtual_folders'] = $delete_virtual_folders;

        return $this;
    }

    /**
     * Gets folder_path
     *
     * @return \BytescalePHP\Client\Model\FolderPath
     */
    public function getFolderPath()
    {
        return $this->container['folder_path'];
    }

    /**
     * Sets folder_path
     *
     * @param \BytescalePHP\Client\Model\FolderPath $folder_path folder_path
     *
     * @return $this
     */
    public function setFolderPath($folder_path)
    {
        $this->container['folder_path'] = $folder_path;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool $recursive If `true` then deletes files and folder settings that descend `folderPath`.  If `false` then only deletes files that are direct children of `folderPath` and only deletes the folder settings of the current folder (if any). Does not delete the folder settings of any child or descendant folders.  Default: true
     *
     * @return $this
     */
    public function setRecursive($recursive)
    {
        $this->container['recursive'] = $recursive;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
