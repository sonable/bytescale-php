<?php
/**
 * DynamicFilePath
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Model;

use \ArrayAccess;
use \Bytescale\ObjectSerializer;

/**
 * DynamicFilePath Class Doc Comment
 *
 * @category Class
 * @description An object containing a &#x60;fileName&#x60; and/or &#x60;folderPath&#x60; field.  The &#x60;folderPath&#x60; may be relative or absolute; paths are relative to the API key&#39;s default folder (configured per API key in the Bytescale Dashboard).  If a field is omitted, the API key&#39;s default values will be used for that field. These are configured per API key via the Bytescale Dashboard.  Supports path variables.
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DynamicFilePath implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DynamicFilePath';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fileName' => 'string',
        'fileNameFallback' => 'string',
        'fileNameVariablesEnabled' => 'bool',
        'folderPath' => 'string',
        'folderPathVariablesEnabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fileName' => null,
        'fileNameFallback' => null,
        'fileNameVariablesEnabled' => null,
        'folderPath' => null,
        'folderPathVariablesEnabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fileName' => false,
        'fileNameFallback' => false,
        'fileNameVariablesEnabled' => false,
        'folderPath' => false,
        'folderPathVariablesEnabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fileName' => 'fileName',
        'fileNameFallback' => 'fileNameFallback',
        'fileNameVariablesEnabled' => 'fileNameVariablesEnabled',
        'folderPath' => 'folderPath',
        'folderPathVariablesEnabled' => 'folderPathVariablesEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fileName' => 'setFileName',
        'fileNameFallback' => 'setFileNameFallback',
        'fileNameVariablesEnabled' => 'setFileNameVariablesEnabled',
        'folderPath' => 'setFolderPath',
        'folderPathVariablesEnabled' => 'setFolderPathVariablesEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fileName' => 'getFileName',
        'fileNameFallback' => 'getFileNameFallback',
        'fileNameVariablesEnabled' => 'getFileNameVariablesEnabled',
        'folderPath' => 'getFolderPath',
        'folderPathVariablesEnabled' => 'getFolderPathVariablesEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fileName', $data ?? [], null);
        $this->setIfExists('fileNameFallback', $data ?? [], null);
        $this->setIfExists('fileNameVariablesEnabled', $data ?? [], null);
        $this->setIfExists('folderPath', $data ?? [], null);
        $this->setIfExists('folderPathVariablesEnabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['fileName']) && (mb_strlen($this->container['fileName']) > 512)) {
            $invalidProperties[] = "invalid value for 'fileName', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['fileName']) && (mb_strlen($this->container['fileName']) < 0)) {
            $invalidProperties[] = "invalid value for 'fileName', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fileName']) && !preg_match("/^[^\/]*$/", $this->container['fileName'])) {
            $invalidProperties[] = "invalid value for 'fileName', must be conform to the pattern /^[^\/]*$/.";
        }

        if (!is_null($this->container['fileNameFallback']) && (mb_strlen($this->container['fileNameFallback']) > 512)) {
            $invalidProperties[] = "invalid value for 'fileNameFallback', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['fileNameFallback']) && (mb_strlen($this->container['fileNameFallback']) < 0)) {
            $invalidProperties[] = "invalid value for 'fileNameFallback', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fileNameFallback']) && !preg_match("/^[^\/]*$/", $this->container['fileNameFallback'])) {
            $invalidProperties[] = "invalid value for 'fileNameFallback', must be conform to the pattern /^[^\/]*$/.";
        }

        if (!is_null($this->container['folderPath']) && (mb_strlen($this->container['folderPath']) > 512)) {
            $invalidProperties[] = "invalid value for 'folderPath', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['folderPath']) && (mb_strlen($this->container['folderPath']) < 0)) {
            $invalidProperties[] = "invalid value for 'folderPath', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['folderPath']) && !preg_match("/^.*$/", $this->container['folderPath'])) {
            $invalidProperties[] = "invalid value for 'folderPath', must be conform to the pattern /^.*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fileName
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     *
     * @param string|null $fileName The file name to upload the file with.  Must not contain `/`.  Supports path variables.
     *
     * @return self
     */
    public function setFileName($fileName)
    {
        if (is_null($fileName)) {
            throw new \InvalidArgumentException('non-nullable fileName cannot be null');
        }
        if ((mb_strlen($fileName) > 512)) {
            throw new \InvalidArgumentException('invalid length for $fileName when calling DynamicFilePath., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($fileName) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fileName when calling DynamicFilePath., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[^\/]*$/", ObjectSerializer::toString($fileName)))) {
            throw new \InvalidArgumentException("invalid value for \$fileName when calling DynamicFilePath., must conform to the pattern /^[^\/]*$/.");
        }

        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets fileNameFallback
     *
     * @return string|null
     */
    public function getFileNameFallback()
    {
        return $this->container['fileNameFallback'];
    }

    /**
     * Sets fileNameFallback
     *
     * @param string|null $fileNameFallback The file name to upload the file with.  Must not contain `/`.  Supports path variables.
     *
     * @return self
     */
    public function setFileNameFallback($fileNameFallback)
    {
        if (is_null($fileNameFallback)) {
            throw new \InvalidArgumentException('non-nullable fileNameFallback cannot be null');
        }
        if ((mb_strlen($fileNameFallback) > 512)) {
            throw new \InvalidArgumentException('invalid length for $fileNameFallback when calling DynamicFilePath., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($fileNameFallback) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fileNameFallback when calling DynamicFilePath., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^[^\/]*$/", ObjectSerializer::toString($fileNameFallback)))) {
            throw new \InvalidArgumentException("invalid value for \$fileNameFallback when calling DynamicFilePath., must conform to the pattern /^[^\/]*$/.");
        }

        $this->container['fileNameFallback'] = $fileNameFallback;

        return $this;
    }

    /**
     * Gets fileNameVariablesEnabled
     *
     * @return bool|null
     */
    public function getFileNameVariablesEnabled()
    {
        return $this->container['fileNameVariablesEnabled'];
    }

    /**
     * Sets fileNameVariablesEnabled
     *
     * @param bool|null $fileNameVariablesEnabled If `true` then path variables like `{UTC_DATE}` in the `fileName` will be replaced. You can escape `{` characters with a `\\`.  If `false` then path variables like `{UTC_DATE}` in the `fileName` will be taken literally.  Default: true
     *
     * @return self
     */
    public function setFileNameVariablesEnabled($fileNameVariablesEnabled)
    {
        if (is_null($fileNameVariablesEnabled)) {
            throw new \InvalidArgumentException('non-nullable fileNameVariablesEnabled cannot be null');
        }
        $this->container['fileNameVariablesEnabled'] = $fileNameVariablesEnabled;

        return $this;
    }

    /**
     * Gets folderPath
     *
     * @return string|null
     */
    public function getFolderPath()
    {
        return $this->container['folderPath'];
    }

    /**
     * Sets folderPath
     *
     * @param string|null $folderPath Absolute or relative path to a folder in your Bytescale account's storage.  Relative paths are relative to the API key's default folder (configured per API key in the Bytescale Dashboard).  Should not end with `/`.  Does not support path traversals (e.g. `..`).  Supports path variables.
     *
     * @return self
     */
    public function setFolderPath($folderPath)
    {
        if (is_null($folderPath)) {
            throw new \InvalidArgumentException('non-nullable folderPath cannot be null');
        }
        if ((mb_strlen($folderPath) > 512)) {
            throw new \InvalidArgumentException('invalid length for $folderPath when calling DynamicFilePath., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($folderPath) < 0)) {
            throw new \InvalidArgumentException('invalid length for $folderPath when calling DynamicFilePath., must be bigger than or equal to 0.');
        }
        if ((!preg_match("/^.*$/", ObjectSerializer::toString($folderPath)))) {
            throw new \InvalidArgumentException("invalid value for \$folderPath when calling DynamicFilePath., must conform to the pattern /^.*$/.");
        }

        $this->container['folderPath'] = $folderPath;

        return $this;
    }

    /**
     * Gets folderPathVariablesEnabled
     *
     * @return bool|null
     */
    public function getFolderPathVariablesEnabled()
    {
        return $this->container['folderPathVariablesEnabled'];
    }

    /**
     * Sets folderPathVariablesEnabled
     *
     * @param bool|null $folderPathVariablesEnabled If `true` then path variables like `{UTC_DATE}` in the `folderPath` will be replaced. You can escape `{` characters with a `\\`.  If `false` then path variables like `{UTC_DATE}` in the `folderPath` will be taken literally.  Default: true
     *
     * @return self
     */
    public function setFolderPathVariablesEnabled($folderPathVariablesEnabled)
    {
        if (is_null($folderPathVariablesEnabled)) {
            throw new \InvalidArgumentException('non-nullable folderPathVariablesEnabled cannot be null');
        }
        $this->container['folderPathVariablesEnabled'] = $folderPathVariablesEnabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


