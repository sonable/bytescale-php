<?php

/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * BytescalePHP Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BytescalePHP\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BytescalePHP\Client\ApiException;
use BytescalePHP\Client\Configuration;
use BytescalePHP\Client\HeaderSelector;
use BytescalePHP\Client\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  BytescalePHP\Client
 * @author   BytescalePHP Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelJob
     *
     * Cancels an in-progress background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type job_type (required)
     *
     * @throws \BytescalePHP\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelJob($account_id, $job_id, $job_type)
    {
        $this->cancelJobWithHttpInfo($account_id, $job_id, $job_type);
    }

    /**
     * Operation cancelJobWithHttpInfo
     *
     * Cancels an in-progress background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \BytescalePHP\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelJobWithHttpInfo($account_id, $job_id, $job_type)
    {
        $returnType = '';
        $request = $this->cancelJobRequest($account_id, $job_id, $job_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BytescalePHP\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelJobAsync
     *
     * Cancels an in-progress background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelJobAsync($account_id, $job_id, $job_type)
    {
        return $this->cancelJobAsyncWithHttpInfo($account_id, $job_id, $job_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelJobAsyncWithHttpInfo
     *
     * Cancels an in-progress background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelJobAsyncWithHttpInfo($account_id, $job_id, $job_type)
    {
        $returnType = '';
        $request = $this->cancelJobRequest($account_id, $job_id, $job_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelJob'
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelJobRequest($account_id, $job_id, $job_type)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling cancelJob'
            );
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling cancelJob'
            );
        }
        // verify the required parameter 'job_type' is set
        if ($job_type === null || (is_array($job_type) && count($job_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_type when calling cancelJob'
            );
        }

        $resourcePath = '/v2/accounts/{accountId}/jobs/{jobType}/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($job_type !== null) {
            $resourcePath = str_replace(
                '{' . 'jobType' . '}',
                ObjectSerializer::toPathValue($job_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJob
     *
     * Gets information on a background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type job_type (required)
     *
     * @throws \BytescalePHP\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BytescalePHP\Client\Model\JobSummary
     */
    public function getJob($account_id, $job_id, $job_type)
    {
        list($response) = $this->getJobWithHttpInfo($account_id, $job_id, $job_type);
        return $response;
    }

    /**
     * Operation getJobWithHttpInfo
     *
     * Gets information on a background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \BytescalePHP\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BytescalePHP\Client\Model\JobSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobWithHttpInfo($account_id, $job_id, $job_type)
    {
        $returnType = '\BytescalePHP\Client\Model\JobSummary';
        $request = $this->getJobRequest($account_id, $job_id, $job_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BytescalePHP\Client\Model\JobSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BytescalePHP\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobAsync
     *
     * Gets information on a background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobAsync($account_id, $job_id, $job_type)
    {
        return $this->getJobAsyncWithHttpInfo($account_id, $job_id, $job_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobAsyncWithHttpInfo
     *
     * Gets information on a background job.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobAsyncWithHttpInfo($account_id, $job_id, $job_type)
    {
        $returnType = '\BytescalePHP\Client\Model\JobSummary';
        $request = $this->getJobRequest($account_id, $job_id, $job_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJob'
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobId $job_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJobRequest($account_id, $job_id, $job_type)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getJob'
            );
        }
        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling getJob'
            );
        }
        // verify the required parameter 'job_type' is set
        if ($job_type === null || (is_array($job_type) && count($job_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_type when calling getJob'
            );
        }

        $resourcePath = '/v2/accounts/{accountId}/jobs/{jobType}/{jobId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace(
                '{' . 'jobId' . '}',
                ObjectSerializer::toPathValue($job_id),
                $resourcePath
            );
        }
        // path params
        if ($job_type !== null) {
            $resourcePath = str_replace(
                '{' . 'jobType' . '}',
                ObjectSerializer::toPathValue($job_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRecentJobs
     *
     * Lists the most recently issued background jobs.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType[] $job_type job_type (required)
     *
     * @throws \BytescalePHP\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BytescalePHP\Client\Model\ListRecentJobsResponse
     */
    public function listRecentJobs($account_id, $job_type)
    {
        list($response) = $this->listRecentJobsWithHttpInfo($account_id, $job_type);
        return $response;
    }

    /**
     * Operation listRecentJobsWithHttpInfo
     *
     * Lists the most recently issued background jobs.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType[] $job_type (required)
     *
     * @throws \BytescalePHP\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BytescalePHP\Client\Model\ListRecentJobsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRecentJobsWithHttpInfo($account_id, $job_type)
    {
        $returnType = '\BytescalePHP\Client\Model\ListRecentJobsResponse';
        $request = $this->listRecentJobsRequest($account_id, $job_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BytescalePHP\Client\Model\ListRecentJobsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BytescalePHP\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRecentJobsAsync
     *
     * Lists the most recently issued background jobs.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType[] $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRecentJobsAsync($account_id, $job_type)
    {
        return $this->listRecentJobsAsyncWithHttpInfo($account_id, $job_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRecentJobsAsyncWithHttpInfo
     *
     * Lists the most recently issued background jobs.  Requires a `secret_*` API key.
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType[] $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRecentJobsAsyncWithHttpInfo($account_id, $job_type)
    {
        $returnType = '\BytescalePHP\Client\Model\ListRecentJobsResponse';
        $request = $this->listRecentJobsRequest($account_id, $job_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRecentJobs'
     *
     * @param  \BytescalePHP\Client\Model\AccountId $account_id (required)
     * @param  \BytescalePHP\Client\Model\AccountJobType[] $job_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listRecentJobsRequest($account_id, $job_type)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling listRecentJobs'
            );
        }
        // verify the required parameter 'job_type' is set
        if ($job_type === null || (is_array($job_type) && count($job_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_type when calling listRecentJobs'
            );
        }

        $resourcePath = '/v2/accounts/{accountId}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($job_type)) {
            $job_type = ObjectSerializer::serializeCollection($job_type, 'multi', true);
        }
        if ($job_type !== null) {
            $queryParams['jobType'] = ObjectSerializer::toQueryValue($job_type, null);
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
