<?php
/**
 * FolderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bytescale\ApiException;
use Bytescale\Configuration;
use Bytescale\HeaderSelector;
use Bytescale\ObjectSerializer;

/**
 * FolderApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FolderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'copyFolder' => [
            'application/json',
        ],
        'copyFolderBatch' => [
            'application/json',
        ],
        'deleteFolder' => [
            'application/json',
        ],
        'deleteFolderBatch' => [
            'application/json',
        ],
        'getFolderDetails' => [
            'application/json',
        ],
        'listFolder' => [
            'application/json',
        ],
        'putFolder' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation copyFolder
     *
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\CopyFolderRequest $copyFolderRequest copyFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse
     */
    public function copyFolder($accountId, $copyFolderRequest, string $contentType = self::contentTypes['copyFolder'][0])
    {
        list($response) = $this->copyFolderWithHttpInfo($accountId, $copyFolderRequest, $contentType);
        return $response;
    }

    /**
     * Operation copyFolderWithHttpInfo
     *
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderRequest $copyFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyFolderWithHttpInfo($accountId, $copyFolderRequest, string $contentType = self::contentTypes['copyFolder'][0])
    {
        $request = $this->copyFolderRequest($accountId, $copyFolderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\AsyncResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation copyFolderAsync
     *
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderRequest $copyFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyFolderAsync($accountId, $copyFolderRequest, string $contentType = self::contentTypes['copyFolder'][0])
    {
        return $this->copyFolderAsyncWithHttpInfo($accountId, $copyFolderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyFolderAsyncWithHttpInfo
     *
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderRequest $copyFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyFolderAsyncWithHttpInfo($accountId, $copyFolderRequest, string $contentType = self::contentTypes['copyFolder'][0])
    {
        $returnType = '\Bytescale\Model\AsyncResponse';
        $request = $this->copyFolderRequest($accountId, $copyFolderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyFolder'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderRequest $copyFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function copyFolderRequest($accountId, $copyFolderRequest, string $contentType = self::contentTypes['copyFolder'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling copyFolder'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.copyFolder, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.copyFolder, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.copyFolder, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'copyFolderRequest' is set
        if ($copyFolderRequest === null || (is_array($copyFolderRequest) && count($copyFolderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $copyFolderRequest when calling copyFolder'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/folders/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($copyFolderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($copyFolderRequest));
            } else {
                $httpBody = $copyFolderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation copyFolderBatch
     *
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\CopyFolderBatchRequest $copyFolderBatchRequest copyFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolderBatch'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse
     */
    public function copyFolderBatch($accountId, $copyFolderBatchRequest, string $contentType = self::contentTypes['copyFolderBatch'][0])
    {
        list($response) = $this->copyFolderBatchWithHttpInfo($accountId, $copyFolderBatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation copyFolderBatchWithHttpInfo
     *
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderBatchRequest $copyFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolderBatch'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyFolderBatchWithHttpInfo($accountId, $copyFolderBatchRequest, string $contentType = self::contentTypes['copyFolderBatch'][0])
    {
        $request = $this->copyFolderBatchRequest($accountId, $copyFolderBatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\AsyncResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation copyFolderBatchAsync
     *
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderBatchRequest $copyFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolderBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyFolderBatchAsync($accountId, $copyFolderBatchRequest, string $contentType = self::contentTypes['copyFolderBatch'][0])
    {
        return $this->copyFolderBatchAsyncWithHttpInfo($accountId, $copyFolderBatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyFolderBatchAsyncWithHttpInfo
     *
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderBatchRequest $copyFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolderBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyFolderBatchAsyncWithHttpInfo($accountId, $copyFolderBatchRequest, string $contentType = self::contentTypes['copyFolderBatch'][0])
    {
        $returnType = '\Bytescale\Model\AsyncResponse';
        $request = $this->copyFolderBatchRequest($accountId, $copyFolderBatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyFolderBatch'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\CopyFolderBatchRequest $copyFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['copyFolderBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function copyFolderBatchRequest($accountId, $copyFolderBatchRequest, string $contentType = self::contentTypes['copyFolderBatch'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling copyFolderBatch'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.copyFolderBatch, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.copyFolderBatch, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.copyFolderBatch, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'copyFolderBatchRequest' is set
        if ($copyFolderBatchRequest === null || (is_array($copyFolderBatchRequest) && count($copyFolderBatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $copyFolderBatchRequest when calling copyFolderBatch'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/folders/copy/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($copyFolderBatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($copyFolderBatchRequest));
            } else {
                $httpBody = $copyFolderBatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFolder
     *
     * Deletes a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\DeleteFolderRequest $deleteFolderRequest deleteFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse
     */
    public function deleteFolder($accountId, $deleteFolderRequest, string $contentType = self::contentTypes['deleteFolder'][0])
    {
        list($response) = $this->deleteFolderWithHttpInfo($accountId, $deleteFolderRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteFolderWithHttpInfo
     *
     * Deletes a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderRequest $deleteFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFolderWithHttpInfo($accountId, $deleteFolderRequest, string $contentType = self::contentTypes['deleteFolder'][0])
    {
        $request = $this->deleteFolderRequest($accountId, $deleteFolderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\AsyncResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFolderAsync
     *
     * Deletes a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderRequest $deleteFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderAsync($accountId, $deleteFolderRequest, string $contentType = self::contentTypes['deleteFolder'][0])
    {
        return $this->deleteFolderAsyncWithHttpInfo($accountId, $deleteFolderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFolderAsyncWithHttpInfo
     *
     * Deletes a folder asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderRequest $deleteFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderAsyncWithHttpInfo($accountId, $deleteFolderRequest, string $contentType = self::contentTypes['deleteFolder'][0])
    {
        $returnType = '\Bytescale\Model\AsyncResponse';
        $request = $this->deleteFolderRequest($accountId, $deleteFolderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFolder'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderRequest $deleteFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFolderRequest($accountId, $deleteFolderRequest, string $contentType = self::contentTypes['deleteFolder'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteFolder'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.deleteFolder, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.deleteFolder, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.deleteFolder, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'deleteFolderRequest' is set
        if ($deleteFolderRequest === null || (is_array($deleteFolderRequest) && count($deleteFolderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deleteFolderRequest when calling deleteFolder'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deleteFolderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deleteFolderRequest));
            } else {
                $httpBody = $deleteFolderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFolderBatch
     *
     * Deletes multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\DeleteFolderBatchRequest $deleteFolderBatchRequest deleteFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolderBatch'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse
     */
    public function deleteFolderBatch($accountId, $deleteFolderBatchRequest, string $contentType = self::contentTypes['deleteFolderBatch'][0])
    {
        list($response) = $this->deleteFolderBatchWithHttpInfo($accountId, $deleteFolderBatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteFolderBatchWithHttpInfo
     *
     * Deletes multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderBatchRequest $deleteFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolderBatch'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\AsyncResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFolderBatchWithHttpInfo($accountId, $deleteFolderBatchRequest, string $contentType = self::contentTypes['deleteFolderBatch'][0])
    {
        $request = $this->deleteFolderBatchRequest($accountId, $deleteFolderBatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\AsyncResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\AsyncResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\AsyncResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\AsyncResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\AsyncResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFolderBatchAsync
     *
     * Deletes multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderBatchRequest $deleteFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolderBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderBatchAsync($accountId, $deleteFolderBatchRequest, string $contentType = self::contentTypes['deleteFolderBatch'][0])
    {
        return $this->deleteFolderBatchAsyncWithHttpInfo($accountId, $deleteFolderBatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFolderBatchAsyncWithHttpInfo
     *
     * Deletes multiple folders asynchronously.  You can use ListFolder to preview the operation using the &#x60;dryRun&#x60; parameter.  *When deleting a folder with external storage:* if the folder at &#x60;folderPath&#x60; has overridden storage settings (like an AWS S3 bucket), no files will be deleted, regardless of the parameters you pass. Only the mapping will be removed. If the folder at &#x60;folderPath&#x60; has inherited storage settings but includes subfolders with overridden storage settings, files in those subfolders won&#39;t be deleted, regardless of the parameters you pass. In summary, files in folders with overridden storage are never deleted, unless you directly delete a subfolder of such a folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderBatchRequest $deleteFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolderBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderBatchAsyncWithHttpInfo($accountId, $deleteFolderBatchRequest, string $contentType = self::contentTypes['deleteFolderBatch'][0])
    {
        $returnType = '\Bytescale\Model\AsyncResponse';
        $request = $this->deleteFolderBatchRequest($accountId, $deleteFolderBatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFolderBatch'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\DeleteFolderBatchRequest $deleteFolderBatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolderBatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFolderBatchRequest($accountId, $deleteFolderBatchRequest, string $contentType = self::contentTypes['deleteFolderBatch'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteFolderBatch'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.deleteFolderBatch, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.deleteFolderBatch, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.deleteFolderBatch, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'deleteFolderBatchRequest' is set
        if ($deleteFolderBatchRequest === null || (is_array($deleteFolderBatchRequest) && count($deleteFolderBatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deleteFolderBatchRequest when calling deleteFolderBatch'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/folders/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deleteFolderBatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deleteFolderBatchRequest));
            } else {
                $httpBody = $deleteFolderBatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolderDetails
     *
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId accountId (required)
     * @param  string $folderPath folderPath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderDetails'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\FolderDetails|\Bytescale\Model\ErrorResponse
     */
    public function getFolderDetails($accountId, $folderPath, string $contentType = self::contentTypes['getFolderDetails'][0])
    {
        list($response) = $this->getFolderDetailsWithHttpInfo($accountId, $folderPath, $contentType);
        return $response;
    }

    /**
     * Operation getFolderDetailsWithHttpInfo
     *
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderDetails'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\FolderDetails|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderDetailsWithHttpInfo($accountId, $folderPath, string $contentType = self::contentTypes['getFolderDetails'][0])
    {
        $request = $this->getFolderDetailsRequest($accountId, $folderPath, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\FolderDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\FolderDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\FolderDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\FolderDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\FolderDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderDetailsAsync
     *
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderDetailsAsync($accountId, $folderPath, string $contentType = self::contentTypes['getFolderDetails'][0])
    {
        return $this->getFolderDetailsAsyncWithHttpInfo($accountId, $folderPath, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFolderDetailsAsyncWithHttpInfo
     *
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderDetailsAsyncWithHttpInfo($accountId, $folderPath, string $contentType = self::contentTypes['getFolderDetails'][0])
    {
        $returnType = '\Bytescale\Model\FolderDetails';
        $request = $this->getFolderDetailsRequest($accountId, $folderPath, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolderDetails'
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderDetailsRequest($accountId, $folderPath, string $contentType = self::contentTypes['getFolderDetails'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getFolderDetails'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.getFolderDetails, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.getFolderDetails, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.getFolderDetails, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'folderPath' is set
        if ($folderPath === null || (is_array($folderPath) && count($folderPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folderPath when calling getFolderDetails'
            );
        }
        if (strlen($folderPath) > 512) {
            throw new \InvalidArgumentException('invalid length for "$folderPath" when calling FolderApi.getFolderDetails, must be smaller than or equal to 512.');
        }
        if (strlen($folderPath) < 1) {
            throw new \InvalidArgumentException('invalid length for "$folderPath" when calling FolderApi.getFolderDetails, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^\/.*$/", $folderPath)) {
            throw new \InvalidArgumentException("invalid value for \"folderPath\" when calling FolderApi.getFolderDetails, must conform to the pattern /^\/.*$/.");
        }
        

        $resourcePath = '/v2/accounts/{accountId}/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $folderPath,
            'folderPath', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listFolder
     *
     * Lists the folder&#39;s contents.  The result may be paginated: subsequent pages can be requested by passing the &#x60;&#x60;&#x60;cursor&#x60;&#x60;&#x60; from the response into the next request.  Pagination is complete when the response includes &#x60;isPaginationComplete&#x3D;true&#x60;.
     *
     * @param  string $accountId accountId (required)
     * @param  string $folderPath folderPath (required)
     * @param  string $cursor cursor (optional)
     * @param  bool $dryRun dryRun (optional)
     * @param  bool $includeFiles includeFiles (optional)
     * @param  bool $includeOverriddenStorage includeOverriddenStorage (optional)
     * @param  bool $includePhysicalFolders includePhysicalFolders (optional)
     * @param  bool $includeVirtualFolders includeVirtualFolders (optional)
     * @param  int $limit limit (optional)
     * @param  bool $recursive recursive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\ListFolderResponse|\Bytescale\Model\ErrorResponse
     */
    public function listFolder($accountId, $folderPath, $cursor = null, $dryRun = null, $includeFiles = null, $includeOverriddenStorage = null, $includePhysicalFolders = null, $includeVirtualFolders = null, $limit = null, $recursive = null, string $contentType = self::contentTypes['listFolder'][0])
    {
        list($response) = $this->listFolderWithHttpInfo($accountId, $folderPath, $cursor, $dryRun, $includeFiles, $includeOverriddenStorage, $includePhysicalFolders, $includeVirtualFolders, $limit, $recursive, $contentType);
        return $response;
    }

    /**
     * Operation listFolderWithHttpInfo
     *
     * Lists the folder&#39;s contents.  The result may be paginated: subsequent pages can be requested by passing the &#x60;&#x60;&#x60;cursor&#x60;&#x60;&#x60; from the response into the next request.  Pagination is complete when the response includes &#x60;isPaginationComplete&#x3D;true&#x60;.
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $cursor (optional)
     * @param  bool $dryRun (optional)
     * @param  bool $includeFiles (optional)
     * @param  bool $includeOverriddenStorage (optional)
     * @param  bool $includePhysicalFolders (optional)
     * @param  bool $includeVirtualFolders (optional)
     * @param  int $limit (optional)
     * @param  bool $recursive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\ListFolderResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFolderWithHttpInfo($accountId, $folderPath, $cursor = null, $dryRun = null, $includeFiles = null, $includeOverriddenStorage = null, $includePhysicalFolders = null, $includeVirtualFolders = null, $limit = null, $recursive = null, string $contentType = self::contentTypes['listFolder'][0])
    {
        $request = $this->listFolderRequest($accountId, $folderPath, $cursor, $dryRun, $includeFiles, $includeOverriddenStorage, $includePhysicalFolders, $includeVirtualFolders, $limit, $recursive, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\ListFolderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ListFolderResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ListFolderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\ListFolderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ListFolderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listFolderAsync
     *
     * Lists the folder&#39;s contents.  The result may be paginated: subsequent pages can be requested by passing the &#x60;&#x60;&#x60;cursor&#x60;&#x60;&#x60; from the response into the next request.  Pagination is complete when the response includes &#x60;isPaginationComplete&#x3D;true&#x60;.
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $cursor (optional)
     * @param  bool $dryRun (optional)
     * @param  bool $includeFiles (optional)
     * @param  bool $includeOverriddenStorage (optional)
     * @param  bool $includePhysicalFolders (optional)
     * @param  bool $includeVirtualFolders (optional)
     * @param  int $limit (optional)
     * @param  bool $recursive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFolderAsync($accountId, $folderPath, $cursor = null, $dryRun = null, $includeFiles = null, $includeOverriddenStorage = null, $includePhysicalFolders = null, $includeVirtualFolders = null, $limit = null, $recursive = null, string $contentType = self::contentTypes['listFolder'][0])
    {
        return $this->listFolderAsyncWithHttpInfo($accountId, $folderPath, $cursor, $dryRun, $includeFiles, $includeOverriddenStorage, $includePhysicalFolders, $includeVirtualFolders, $limit, $recursive, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listFolderAsyncWithHttpInfo
     *
     * Lists the folder&#39;s contents.  The result may be paginated: subsequent pages can be requested by passing the &#x60;&#x60;&#x60;cursor&#x60;&#x60;&#x60; from the response into the next request.  Pagination is complete when the response includes &#x60;isPaginationComplete&#x3D;true&#x60;.
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $cursor (optional)
     * @param  bool $dryRun (optional)
     * @param  bool $includeFiles (optional)
     * @param  bool $includeOverriddenStorage (optional)
     * @param  bool $includePhysicalFolders (optional)
     * @param  bool $includeVirtualFolders (optional)
     * @param  int $limit (optional)
     * @param  bool $recursive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listFolderAsyncWithHttpInfo($accountId, $folderPath, $cursor = null, $dryRun = null, $includeFiles = null, $includeOverriddenStorage = null, $includePhysicalFolders = null, $includeVirtualFolders = null, $limit = null, $recursive = null, string $contentType = self::contentTypes['listFolder'][0])
    {
        $returnType = '\Bytescale\Model\ListFolderResponse';
        $request = $this->listFolderRequest($accountId, $folderPath, $cursor, $dryRun, $includeFiles, $includeOverriddenStorage, $includePhysicalFolders, $includeVirtualFolders, $limit, $recursive, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listFolder'
     *
     * @param  string $accountId (required)
     * @param  string $folderPath (required)
     * @param  string $cursor (optional)
     * @param  bool $dryRun (optional)
     * @param  bool $includeFiles (optional)
     * @param  bool $includeOverriddenStorage (optional)
     * @param  bool $includePhysicalFolders (optional)
     * @param  bool $includeVirtualFolders (optional)
     * @param  int $limit (optional)
     * @param  bool $recursive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listFolderRequest($accountId, $folderPath, $cursor = null, $dryRun = null, $includeFiles = null, $includeOverriddenStorage = null, $includePhysicalFolders = null, $includeVirtualFolders = null, $limit = null, $recursive = null, string $contentType = self::contentTypes['listFolder'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling listFolder'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.listFolder, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.listFolder, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.listFolder, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'folderPath' is set
        if ($folderPath === null || (is_array($folderPath) && count($folderPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folderPath when calling listFolder'
            );
        }
        if (strlen($folderPath) > 512) {
            throw new \InvalidArgumentException('invalid length for "$folderPath" when calling FolderApi.listFolder, must be smaller than or equal to 512.');
        }
        if (strlen($folderPath) < 1) {
            throw new \InvalidArgumentException('invalid length for "$folderPath" when calling FolderApi.listFolder, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^\/.*$/", $folderPath)) {
            throw new \InvalidArgumentException("invalid value for \"folderPath\" when calling FolderApi.listFolder, must conform to the pattern /^\/.*$/.");
        }
        
        if ($cursor !== null && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $cursor)) {
            throw new \InvalidArgumentException("invalid value for \"cursor\" when calling FolderApi.listFolder, must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }
        





        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FolderApi.listFolder, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FolderApi.listFolder, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/accounts/{accountId}/folders/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dryRun,
            'dryRun', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $folderPath,
            'folderPath', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeFiles,
            'includeFiles', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeOverriddenStorage,
            'includeOverriddenStorage', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includePhysicalFolders,
            'includePhysicalFolders', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeVirtualFolders,
            'includeVirtualFolders', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recursive,
            'recursive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFolder
     *
     * Creates or updates the folder specified by the &#x60;folderPath&#x60;.  If the folder&#39;s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don&#39;t need to create folders before uploading files to them.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\PutFolderRequest $putFolderRequest putFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\FolderDetails|\Bytescale\Model\ErrorResponse
     */
    public function putFolder($accountId, $putFolderRequest, string $contentType = self::contentTypes['putFolder'][0])
    {
        list($response) = $this->putFolderWithHttpInfo($accountId, $putFolderRequest, $contentType);
        return $response;
    }

    /**
     * Operation putFolderWithHttpInfo
     *
     * Creates or updates the folder specified by the &#x60;folderPath&#x60;.  If the folder&#39;s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don&#39;t need to create folders before uploading files to them.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\PutFolderRequest $putFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFolder'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\FolderDetails|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFolderWithHttpInfo($accountId, $putFolderRequest, string $contentType = self::contentTypes['putFolder'][0])
    {
        $request = $this->putFolderRequest($accountId, $putFolderRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\FolderDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\FolderDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\FolderDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\FolderDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\FolderDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFolderAsync
     *
     * Creates or updates the folder specified by the &#x60;folderPath&#x60;.  If the folder&#39;s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don&#39;t need to create folders before uploading files to them.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\PutFolderRequest $putFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFolderAsync($accountId, $putFolderRequest, string $contentType = self::contentTypes['putFolder'][0])
    {
        return $this->putFolderAsyncWithHttpInfo($accountId, $putFolderRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFolderAsyncWithHttpInfo
     *
     * Creates or updates the folder specified by the &#x60;folderPath&#x60;.  If the folder&#39;s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don&#39;t need to create folders before uploading files to them.  Requires a &#x60;secret_*&#x60; API key. Alternatively, you can use a &#x60;public_*&#x60; API key and JWT-based auth.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\PutFolderRequest $putFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFolderAsyncWithHttpInfo($accountId, $putFolderRequest, string $contentType = self::contentTypes['putFolder'][0])
    {
        $returnType = '\Bytescale\Model\FolderDetails';
        $request = $this->putFolderRequest($accountId, $putFolderRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFolder'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\PutFolderRequest $putFolderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putFolderRequest($accountId, $putFolderRequest, string $contentType = self::contentTypes['putFolder'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling putFolder'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.putFolder, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling FolderApi.putFolder, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling FolderApi.putFolder, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'putFolderRequest' is set
        if ($putFolderRequest === null || (is_array($putFolderRequest) && count($putFolderRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $putFolderRequest when calling putFolder'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($putFolderRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($putFolderRequest));
            } else {
                $httpBody = $putFolderRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
