<?php
/**
 * UploadApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * @bytescale/api
 *
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bytescale\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bytescale\ApiException;
use Bytescale\Configuration;
use Bytescale\HeaderSelector;
use Bytescale\ObjectSerializer;

/**
 * UploadApi Class Doc Comment
 *
 * @category Class
 * @package  Bytescale
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UploadApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'beginMultipartUpload' => [
            'application/json',
        ],
        'completeUploadPart' => [
            'application/json',
        ],
        'getUploadPart' => [
            'application/json',
        ],
        'listUploadParts' => [
            'application/json',
        ],
        'uploadFromUrl' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation beginMultipartUpload
     *
     * Begins a new multipart file upload process.
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\BeginMultipartUploadRequest $beginMultipartUploadRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['beginMultipartUpload'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\BeginMultipartUploadResponse|\Bytescale\Model\ErrorResponse
     */
    public function beginMultipartUpload($accountId, $beginMultipartUploadRequest, string $contentType = self::contentTypes['beginMultipartUpload'][0])
    {
        list($response) = $this->beginMultipartUploadWithHttpInfo($accountId, $beginMultipartUploadRequest, $contentType);
        return $response;
    }

    /**
     * Operation beginMultipartUploadWithHttpInfo
     *
     * Begins a new multipart file upload process.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\BeginMultipartUploadRequest $beginMultipartUploadRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['beginMultipartUpload'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\BeginMultipartUploadResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function beginMultipartUploadWithHttpInfo($accountId, $beginMultipartUploadRequest, string $contentType = self::contentTypes['beginMultipartUpload'][0])
    {
        $request = $this->beginMultipartUploadRequest($accountId, $beginMultipartUploadRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\BeginMultipartUploadResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\BeginMultipartUploadResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\BeginMultipartUploadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\BeginMultipartUploadResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\BeginMultipartUploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation beginMultipartUploadAsync
     *
     * Begins a new multipart file upload process.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\BeginMultipartUploadRequest $beginMultipartUploadRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['beginMultipartUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function beginMultipartUploadAsync($accountId, $beginMultipartUploadRequest, string $contentType = self::contentTypes['beginMultipartUpload'][0])
    {
        return $this->beginMultipartUploadAsyncWithHttpInfo($accountId, $beginMultipartUploadRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation beginMultipartUploadAsyncWithHttpInfo
     *
     * Begins a new multipart file upload process.
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\BeginMultipartUploadRequest $beginMultipartUploadRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['beginMultipartUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function beginMultipartUploadAsyncWithHttpInfo($accountId, $beginMultipartUploadRequest, string $contentType = self::contentTypes['beginMultipartUpload'][0])
    {
        $returnType = '\Bytescale\Model\BeginMultipartUploadResponse';
        $request = $this->beginMultipartUploadRequest($accountId, $beginMultipartUploadRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'beginMultipartUpload'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\BeginMultipartUploadRequest $beginMultipartUploadRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['beginMultipartUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function beginMultipartUploadRequest($accountId, $beginMultipartUploadRequest, string $contentType = self::contentTypes['beginMultipartUpload'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling beginMultipartUpload'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.beginMultipartUpload, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.beginMultipartUpload, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling UploadApi.beginMultipartUpload, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'beginMultipartUploadRequest' is set
        if ($beginMultipartUploadRequest === null || (is_array($beginMultipartUploadRequest) && count($beginMultipartUploadRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $beginMultipartUploadRequest when calling beginMultipartUpload'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/uploads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($beginMultipartUploadRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($beginMultipartUploadRequest));
            } else {
                $httpBody = $beginMultipartUploadRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completeUploadPart
     *
     * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a &#x60;PUT&#x60; request to the &#x60;uploadUrl&#x60; on the corresponding UploadPart.
     *
     * @param  string $accountId accountId (required)
     * @param  string $uploadId uploadId (required)
     * @param  int $uploadPartIndex uploadPartIndex (required)
     * @param  \Bytescale\Model\CompleteUploadPartRequest $completeUploadPartRequest completeUploadPartRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUploadPart'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function completeUploadPart($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, string $contentType = self::contentTypes['completeUploadPart'][0])
    {
        $this->completeUploadPartWithHttpInfo($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, $contentType);
    }

    /**
     * Operation completeUploadPartWithHttpInfo
     *
     * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a &#x60;PUT&#x60; request to the &#x60;uploadUrl&#x60; on the corresponding UploadPart.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  \Bytescale\Model\CompleteUploadPartRequest $completeUploadPartRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUploadPart'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function completeUploadPartWithHttpInfo($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, string $contentType = self::contentTypes['completeUploadPart'][0])
    {
        $request = $this->completeUploadPartRequest($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation completeUploadPartAsync
     *
     * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a &#x60;PUT&#x60; request to the &#x60;uploadUrl&#x60; on the corresponding UploadPart.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  \Bytescale\Model\CompleteUploadPartRequest $completeUploadPartRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUploadPart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeUploadPartAsync($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, string $contentType = self::contentTypes['completeUploadPart'][0])
    {
        return $this->completeUploadPartAsyncWithHttpInfo($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completeUploadPartAsyncWithHttpInfo
     *
     * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a &#x60;PUT&#x60; request to the &#x60;uploadUrl&#x60; on the corresponding UploadPart.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  \Bytescale\Model\CompleteUploadPartRequest $completeUploadPartRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUploadPart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeUploadPartAsyncWithHttpInfo($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, string $contentType = self::contentTypes['completeUploadPart'][0])
    {
        $returnType = '';
        $request = $this->completeUploadPartRequest($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completeUploadPart'
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  \Bytescale\Model\CompleteUploadPartRequest $completeUploadPartRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completeUploadPart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function completeUploadPartRequest($accountId, $uploadId, $uploadPartIndex, $completeUploadPartRequest, string $contentType = self::contentTypes['completeUploadPart'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling completeUploadPart'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.completeUploadPart, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.completeUploadPart, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling UploadApi.completeUploadPart, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'uploadId' is set
        if ($uploadId === null || (is_array($uploadId) && count($uploadId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadId when calling completeUploadPart'
            );
        }
        if (strlen($uploadId) > 16) {
            throw new \InvalidArgumentException('invalid length for "$uploadId" when calling UploadApi.completeUploadPart, must be smaller than or equal to 16.');
        }
        if (strlen($uploadId) < 16) {
            throw new \InvalidArgumentException('invalid length for "$uploadId" when calling UploadApi.completeUploadPart, must be bigger than or equal to 16.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $uploadId)) {
            throw new \InvalidArgumentException("invalid value for \"uploadId\" when calling UploadApi.completeUploadPart, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'uploadPartIndex' is set
        if ($uploadPartIndex === null || (is_array($uploadPartIndex) && count($uploadPartIndex) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadPartIndex when calling completeUploadPart'
            );
        }
        if ($uploadPartIndex < 0) {
            throw new \InvalidArgumentException('invalid value for "$uploadPartIndex" when calling UploadApi.completeUploadPart, must be bigger than or equal to 0.');
        }
        
        // verify the required parameter 'completeUploadPartRequest' is set
        if ($completeUploadPartRequest === null || (is_array($completeUploadPartRequest) && count($completeUploadPartRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $completeUploadPartRequest when calling completeUploadPart'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/uploads/{uploadId}/parts/{uploadPartIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($uploadId !== null) {
            $resourcePath = str_replace(
                '{' . 'uploadId' . '}',
                ObjectSerializer::toPathValue($uploadId),
                $resourcePath
            );
        }
        // path params
        if ($uploadPartIndex !== null) {
            $resourcePath = str_replace(
                '{' . 'uploadPartIndex' . '}',
                ObjectSerializer::toPathValue($uploadPartIndex),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($completeUploadPartRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($completeUploadPartRequest));
            } else {
                $httpBody = $completeUploadPartRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUploadPart
     *
     * Gets a remaining upload part for a multipart file upload.
     *
     * @param  string $accountId accountId (required)
     * @param  string $uploadId uploadId (required)
     * @param  int $uploadPartIndex uploadPartIndex (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUploadPart'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\UploadPart|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse
     */
    public function getUploadPart($accountId, $uploadId, $uploadPartIndex, string $contentType = self::contentTypes['getUploadPart'][0])
    {
        list($response) = $this->getUploadPartWithHttpInfo($accountId, $uploadId, $uploadPartIndex, $contentType);
        return $response;
    }

    /**
     * Operation getUploadPartWithHttpInfo
     *
     * Gets a remaining upload part for a multipart file upload.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUploadPart'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\UploadPart|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUploadPartWithHttpInfo($accountId, $uploadId, $uploadPartIndex, string $contentType = self::contentTypes['getUploadPart'][0])
    {
        $request = $this->getUploadPartRequest($accountId, $uploadId, $uploadPartIndex, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\UploadPart' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\UploadPart' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\UploadPart', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\UploadPart';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\UploadPart',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUploadPartAsync
     *
     * Gets a remaining upload part for a multipart file upload.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUploadPart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUploadPartAsync($accountId, $uploadId, $uploadPartIndex, string $contentType = self::contentTypes['getUploadPart'][0])
    {
        return $this->getUploadPartAsyncWithHttpInfo($accountId, $uploadId, $uploadPartIndex, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUploadPartAsyncWithHttpInfo
     *
     * Gets a remaining upload part for a multipart file upload.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUploadPart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUploadPartAsyncWithHttpInfo($accountId, $uploadId, $uploadPartIndex, string $contentType = self::contentTypes['getUploadPart'][0])
    {
        $returnType = '\Bytescale\Model\UploadPart';
        $request = $this->getUploadPartRequest($accountId, $uploadId, $uploadPartIndex, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUploadPart'
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  int $uploadPartIndex (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUploadPart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUploadPartRequest($accountId, $uploadId, $uploadPartIndex, string $contentType = self::contentTypes['getUploadPart'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getUploadPart'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.getUploadPart, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.getUploadPart, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling UploadApi.getUploadPart, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'uploadId' is set
        if ($uploadId === null || (is_array($uploadId) && count($uploadId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadId when calling getUploadPart'
            );
        }
        if (strlen($uploadId) > 16) {
            throw new \InvalidArgumentException('invalid length for "$uploadId" when calling UploadApi.getUploadPart, must be smaller than or equal to 16.');
        }
        if (strlen($uploadId) < 16) {
            throw new \InvalidArgumentException('invalid length for "$uploadId" when calling UploadApi.getUploadPart, must be bigger than or equal to 16.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $uploadId)) {
            throw new \InvalidArgumentException("invalid value for \"uploadId\" when calling UploadApi.getUploadPart, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'uploadPartIndex' is set
        if ($uploadPartIndex === null || (is_array($uploadPartIndex) && count($uploadPartIndex) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadPartIndex when calling getUploadPart'
            );
        }
        if ($uploadPartIndex < 0) {
            throw new \InvalidArgumentException('invalid value for "$uploadPartIndex" when calling UploadApi.getUploadPart, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/v2/accounts/{accountId}/uploads/{uploadId}/parts/{uploadPartIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($uploadId !== null) {
            $resourcePath = str_replace(
                '{' . 'uploadId' . '}',
                ObjectSerializer::toPathValue($uploadId),
                $resourcePath
            );
        }
        // path params
        if ($uploadPartIndex !== null) {
            $resourcePath = str_replace(
                '{' . 'uploadPartIndex' . '}',
                ObjectSerializer::toPathValue($uploadPartIndex),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listUploadParts
     *
     * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
     *
     * @param  string $accountId accountId (required)
     * @param  string $uploadId uploadId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listUploadParts'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\UploadPartList|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse
     */
    public function listUploadParts($accountId, $uploadId, string $contentType = self::contentTypes['listUploadParts'][0])
    {
        list($response) = $this->listUploadPartsWithHttpInfo($accountId, $uploadId, $contentType);
        return $response;
    }

    /**
     * Operation listUploadPartsWithHttpInfo
     *
     * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listUploadParts'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\UploadPartList|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listUploadPartsWithHttpInfo($accountId, $uploadId, string $contentType = self::contentTypes['listUploadParts'][0])
    {
        $request = $this->listUploadPartsRequest($accountId, $uploadId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\UploadPartList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\UploadPartList' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\UploadPartList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\UploadPartList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\UploadPartList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listUploadPartsAsync
     *
     * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listUploadParts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUploadPartsAsync($accountId, $uploadId, string $contentType = self::contentTypes['listUploadParts'][0])
    {
        return $this->listUploadPartsAsyncWithHttpInfo($accountId, $uploadId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listUploadPartsAsyncWithHttpInfo
     *
     * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listUploadParts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUploadPartsAsyncWithHttpInfo($accountId, $uploadId, string $contentType = self::contentTypes['listUploadParts'][0])
    {
        $returnType = '\Bytescale\Model\UploadPartList';
        $request = $this->listUploadPartsRequest($accountId, $uploadId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listUploadParts'
     *
     * @param  string $accountId (required)
     * @param  string $uploadId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listUploadParts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listUploadPartsRequest($accountId, $uploadId, string $contentType = self::contentTypes['listUploadParts'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling listUploadParts'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.listUploadParts, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.listUploadParts, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling UploadApi.listUploadParts, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'uploadId' is set
        if ($uploadId === null || (is_array($uploadId) && count($uploadId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadId when calling listUploadParts'
            );
        }
        if (strlen($uploadId) > 16) {
            throw new \InvalidArgumentException('invalid length for "$uploadId" when calling UploadApi.listUploadParts, must be smaller than or equal to 16.');
        }
        if (strlen($uploadId) < 16) {
            throw new \InvalidArgumentException('invalid length for "$uploadId" when calling UploadApi.listUploadParts, must be bigger than or equal to 16.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $uploadId)) {
            throw new \InvalidArgumentException("invalid value for \"uploadId\" when calling UploadApi.listUploadParts, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        

        $resourcePath = '/v2/accounts/{accountId}/uploads/{uploadId}/parts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($uploadId !== null) {
            $resourcePath = str_replace(
                '{' . 'uploadId' . '}',
                ObjectSerializer::toPathValue($uploadId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadFromUrl
     *
     * Upload from a URL with a single HTTP request:
     *
     * @param  string $accountId accountId (required)
     * @param  \Bytescale\Model\UploadFromUrlRequest $uploadFromUrlRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Bytescale\Model\BasicUploadResponse|\Bytescale\Model\ErrorResponse
     */
    public function uploadFromUrl($accountId, $uploadFromUrlRequest, string $contentType = self::contentTypes['uploadFromUrl'][0])
    {
        list($response) = $this->uploadFromUrlWithHttpInfo($accountId, $uploadFromUrlRequest, $contentType);
        return $response;
    }

    /**
     * Operation uploadFromUrlWithHttpInfo
     *
     * Upload from a URL with a single HTTP request:
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\UploadFromUrlRequest $uploadFromUrlRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \Bytescale\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Bytescale\Model\BasicUploadResponse|\Bytescale\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadFromUrlWithHttpInfo($accountId, $uploadFromUrlRequest, string $contentType = self::contentTypes['uploadFromUrl'][0])
    {
        $request = $this->uploadFromUrlRequest($accountId, $uploadFromUrlRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bytescale\Model\BasicUploadResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\BasicUploadResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\BasicUploadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bytescale\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bytescale\Model\ErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bytescale\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bytescale\Model\BasicUploadResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\BasicUploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bytescale\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadFromUrlAsync
     *
     * Upload from a URL with a single HTTP request:
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\UploadFromUrlRequest $uploadFromUrlRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFromUrlAsync($accountId, $uploadFromUrlRequest, string $contentType = self::contentTypes['uploadFromUrl'][0])
    {
        return $this->uploadFromUrlAsyncWithHttpInfo($accountId, $uploadFromUrlRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadFromUrlAsyncWithHttpInfo
     *
     * Upload from a URL with a single HTTP request:
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\UploadFromUrlRequest $uploadFromUrlRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadFromUrlAsyncWithHttpInfo($accountId, $uploadFromUrlRequest, string $contentType = self::contentTypes['uploadFromUrl'][0])
    {
        $returnType = '\Bytescale\Model\BasicUploadResponse';
        $request = $this->uploadFromUrlRequest($accountId, $uploadFromUrlRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadFromUrl'
     *
     * @param  string $accountId (required)
     * @param  \Bytescale\Model\UploadFromUrlRequest $uploadFromUrlRequest File upload parameters. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadFromUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadFromUrlRequest($accountId, $uploadFromUrlRequest, string $contentType = self::contentTypes['uploadFromUrl'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling uploadFromUrl'
            );
        }
        if (strlen($accountId) > 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.uploadFromUrl, must be smaller than or equal to 7.');
        }
        if (strlen($accountId) < 7) {
            throw new \InvalidArgumentException('invalid length for "$accountId" when calling UploadApi.uploadFromUrl, must be bigger than or equal to 7.');
        }
        if (!preg_match("/^[1-9A-HJ-NP-Za-km-z]*$/", $accountId)) {
            throw new \InvalidArgumentException("invalid value for \"accountId\" when calling UploadApi.uploadFromUrl, must conform to the pattern /^[1-9A-HJ-NP-Za-km-z]*$/.");
        }
        
        // verify the required parameter 'uploadFromUrlRequest' is set
        if ($uploadFromUrlRequest === null || (is_array($uploadFromUrlRequest) && count($uploadFromUrlRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadFromUrlRequest when calling uploadFromUrl'
            );
        }


        $resourcePath = '/v2/accounts/{accountId}/uploads/url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($uploadFromUrlRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($uploadFromUrlRequest));
            } else {
                $httpBody = $uploadFromUrlRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
